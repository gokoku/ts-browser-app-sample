(()=>{var t={584:t=>{t.exports=function(t,e){return Array.prototype.slice.call(t,e)}},514:(t,e,n)=>{"use strict";var r=n(115);t.exports=function(t,e,n){t&&r((function(){t.apply(n||null,e||[])}))}},229:(t,e,n)=>{"use strict";var r=n(584),i=n(514);t.exports=function(t,e){var n=e||{},o={};return void 0===t&&(t={}),t.on=function(e,n){return o[e]?o[e].push(n):o[e]=[n],t},t.once=function(e,n){return n._once=!0,t.on(e,n),t},t.off=function(e,n){var r=arguments.length;if(1===r)delete o[e];else if(0===r)o={};else{var i=o[e];if(!i)return t;i.splice(i.indexOf(n),1)}return t},t.emit=function(){var e=r(arguments);return t.emitterSnapshot(e.shift()).apply(this,e)},t.emitterSnapshot=function(e){var s=(o[e]||[]).slice(0);return function(){var o=r(arguments),a=this||t;if("error"===e&&!1!==n.throws&&!s.length)throw 1===o.length?o[0]:o;return s.forEach((function(r){n.async?i(r,o,a):r.apply(a,o),r._once&&t.off(e,r)})),t}},t}},808:(t,e,n)=>{"use strict";var r=n(638),i=n(874),o=n.g.document,s=function(t,e,n,r){return t.addEventListener(e,n,r)},a=function(t,e,n,r){return t.removeEventListener(e,n,r)},u=[];function c(t,e,n){var r=function(t,e,n){var r,i;for(r=0;r<u.length;r++)if((i=u[r]).element===t&&i.type===e&&i.fn===n)return r}(t,e,n);if(r){var i=u[r].wrapper;return u.splice(r,1),i}}n.g.addEventListener||(s=function(t,e,r){return t.attachEvent("on"+e,function(t,e,r){var i=c(t,e,r)||function(t,e,r){return function(e){var i=e||n.g.event;i.target=i.target||i.srcElement,i.preventDefault=i.preventDefault||function(){i.returnValue=!1},i.stopPropagation=i.stopPropagation||function(){i.cancelBubble=!0},i.which=i.which||i.keyCode,r.call(t,i)}}(t,0,r);return u.push({wrapper:i,element:t,type:e,fn:r}),i}(t,e,r))},a=function(t,e,n){var r=c(t,e,n);if(r)return t.detachEvent("on"+e,r)}),t.exports={add:s,remove:a,fabricate:function(t,e,n){var s=-1===i.indexOf(e)?new r(e,{detail:n}):function(){var t;return o.createEvent?(t=o.createEvent("Event")).initEvent(e,!0,!0):o.createEventObject&&(t=o.createEventObject()),t}();t.dispatchEvent?t.dispatchEvent(s):t.fireEvent("on"+e,s)}}},874:(t,e,n)=>{"use strict";var r=[],i="",o=/^on/;for(i in n.g)o.test(i)&&r.push(i.slice(2));t.exports=r},638:(t,e,n)=>{var r=n.g.CustomEvent;t.exports=function(){try{var t=new r("cat",{detail:{foo:"bar"}});return"cat"===t.type&&"bar"===t.detail.foo}catch(t){}return!1}()?r:"undefined"!=typeof document&&"function"==typeof document.createEvent?function(t,e){var n=document.createEvent("CustomEvent");return e?n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail):n.initCustomEvent(t,!1,!1,void 0),n}:function(t,e){var n=document.createEventObject();return n.type=t,e?(n.bubbles=Boolean(e.bubbles),n.cancelable=Boolean(e.cancelable),n.detail=e.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}},425:t=>{"use strict";var e={};function n(t){var n=e[t];return n?n.lastIndex=0:e[t]=n=new RegExp("(?:^|\\s)"+t+"(?:\\s|$)","g"),n}t.exports={add:function(t,e){var r=t.className;r.length?n(e).test(r)||(t.className+=" "+e):t.className=e},rm:function(t,e){t.className=t.className.replace(n(e)," ").trim()}}},137:(t,e,n)=>{"use strict";var r=n(229),i=n(808),o=n(425),s=document,a=s.documentElement;function u(t,e,r,o){n.g.navigator.pointerEnabled?i[e](t,{mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"}[r],o):n.g.navigator.msPointerEnabled?i[e](t,{mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"}[r],o):(i[e](t,{mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"}[r],o),i[e](t,r,o))}function c(t){if(void 0!==t.touches)return t.touches.length;if(void 0!==t.which&&0!==t.which)return t.which;if(void 0!==t.buttons)return t.buttons;var e=t.button;return void 0!==e?1&e?1:2&e?3:4&e?2:0:void 0}function l(t){var e=t.getBoundingClientRect();return{left:e.left+d("scrollLeft","pageXOffset"),top:e.top+d("scrollTop","pageYOffset")}}function d(t,e){return void 0!==n.g[e]?n.g[e]:a.clientHeight?a[t]:s.body[t]}function f(t,e,n){var r,i=(t=t||{}).className||"";return t.className+=" gu-hide",r=s.elementFromPoint(e,n),t.className=i,r}function v(){return!1}function h(){return!0}function m(t){return t.width||t.right-t.left}function p(t){return t.height||t.bottom-t.top}function g(t){return t.parentNode===s?null:t.parentNode}function y(t){return"INPUT"===t.tagName||"TEXTAREA"===t.tagName||"SELECT"===t.tagName||b(t)}function b(t){return!!t&&"false"!==t.contentEditable&&("true"===t.contentEditable||b(g(t)))}function E(t){return t.nextElementSibling||function(){var e=t;do{e=e.nextSibling}while(e&&1!==e.nodeType);return e}()}function k(t,e){var n=function(t){return t.targetTouches&&t.targetTouches.length?t.targetTouches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t}(e),r={pageX:"clientX",pageY:"clientY"};return t in r&&!(t in n)&&r[t]in n&&(t=r[t]),n[t]}t.exports=function(t,e){var n,d,b,C,w,S,L,T,x,D,O,B=arguments.length;1===B&&!1===Array.isArray(t)&&(e=t,t=[]);var I,A=null,N=e||{};void 0===N.moves&&(N.moves=h),void 0===N.accepts&&(N.accepts=h),void 0===N.invalid&&(N.invalid=z),void 0===N.containers&&(N.containers=t||[]),void 0===N.isContainer&&(N.isContainer=v),void 0===N.copy&&(N.copy=!1),void 0===N.copySortSource&&(N.copySortSource=!1),void 0===N.revertOnSpill&&(N.revertOnSpill=!1),void 0===N.removeOnSpill&&(N.removeOnSpill=!1),void 0===N.direction&&(N.direction="vertical"),void 0===N.ignoreInputTextSelection&&(N.ignoreInputTextSelection=!0),void 0===N.mirrorContainer&&(N.mirrorContainer=s.body);var R=r({containers:N.containers,start:$,end:H,cancel:Z,remove:W,destroy:M,canMove:K,dragging:!1});return!0===N.removeOnSpill&&R.on("over",it).on("out",ot),P(),R;function X(t){return-1!==R.containers.indexOf(t)||N.isContainer(t)}function P(t){var e=t?"remove":"add";u(a,e,"mousedown",V),u(a,e,"mouseup",G)}function Y(t){u(a,t?"remove":"add","mousemove",U)}function j(t){var e=t?"remove":"add";i[e](a,"selectstart",F),i[e](a,"click",F)}function M(){P(!0),G({})}function F(t){I&&t.preventDefault()}function V(t){if(S=t.clientX,L=t.clientY,1===c(t)&&!t.metaKey&&!t.ctrlKey){var e=t.target,n=_(e);n&&(I=n,Y(),"mousedown"===t.type&&(y(e)?e.focus():t.preventDefault()))}}function U(t){if(I)if(0!==c(t)){if(!(void 0!==t.clientX&&Math.abs(t.clientX-S)<=(N.slideFactorX||0)&&void 0!==t.clientY&&Math.abs(t.clientY-L)<=(N.slideFactorY||0))){if(N.ignoreInputTextSelection){var e=k("clientX",t)||0,n=k("clientY",t)||0;if(y(s.elementFromPoint(e,n)))return}var r=I;Y(!0),j(),H(),J(r);var i=l(b);C=k("pageX",t)-i.left,w=k("pageY",t)-i.top,o.add(D||b,"gu-transit"),st(),rt(t)}}else G({})}function _(t){if(!(R.dragging&&n||X(t))){for(var e=t;g(t)&&!1===X(g(t));){if(N.invalid(t,e))return;if(!(t=g(t)))return}var r=g(t);if(r&&!N.invalid(t,e)&&N.moves(t,r,e,E(t)))return{item:t,source:r}}}function K(t){return!!_(t)}function $(t){var e=_(t);e&&J(e)}function J(t){lt(t.item,t.source)&&(D=t.item.cloneNode(!0),R.emit("cloned",D,t.item,"copy")),d=t.source,b=t.item,T=x=E(t.item),R.dragging=!0,R.emit("drag",b,d)}function z(){return!1}function H(){if(R.dragging){var t=D||b;Q(t,g(t))}}function q(){I=!1,Y(!0),j(!0)}function G(t){if(q(),R.dragging){var e=D||b,r=k("clientX",t)||0,i=k("clientY",t)||0,o=nt(f(n,r,i),r,i);o&&(D&&N.copySortSource||!D||o!==d)?Q(e,o):N.removeOnSpill?W():Z()}}function Q(t,e){var n=g(t);D&&N.copySortSource&&e===d&&n.removeChild(b),et(e)?R.emit("cancel",t,d,d):R.emit("drop",t,e,d,x),tt()}function W(){if(R.dragging){var t=D||b,e=g(t);e&&e.removeChild(t),R.emit(D?"cancel":"remove",t,e,d),tt()}}function Z(t){if(R.dragging){var e=arguments.length>0?t:N.revertOnSpill,n=D||b,r=g(n),i=et(r);!1===i&&e&&(D?r&&r.removeChild(D):d.insertBefore(n,T)),i||e?R.emit("cancel",n,d,d):R.emit("drop",n,r,d,x),tt()}}function tt(){var t=D||b;q(),at(),t&&o.rm(t,"gu-transit"),O&&clearTimeout(O),R.dragging=!1,A&&R.emit("out",t,A,d),R.emit("dragend",t),d=b=D=T=x=O=A=null}function et(t,e){var r;return r=void 0!==e?e:n?x:E(D||b),t===d&&r===T}function nt(t,e,n){for(var r=t;r&&!i();)r=g(r);return r;function i(){if(!1===X(r))return!1;var i=ut(r,t),o=ct(r,i,e,n);return!!et(r,o)||N.accepts(b,r,d,o)}}function rt(t){if(n){t.preventDefault();var e=k("clientX",t)||0,r=k("clientY",t)||0,i=e-C,o=r-w;n.style.left=i+"px",n.style.top=o+"px";var s=D||b,a=f(n,e,r),u=nt(a,e,r),c=null!==u&&u!==A;(c||null===u)&&(A&&m("out"),A=u,c&&m("over"));var l=g(s);if(u!==d||!D||N.copySortSource){var v,h=ut(u,a);if(null!==h)v=ct(u,h,e,r);else{if(!0!==N.revertOnSpill||D)return void(D&&l&&l.removeChild(s));v=T,u=d}(null===v&&c||v!==s&&v!==E(s))&&(x=v,u.insertBefore(s,v),R.emit("shadow",s,u,d))}else l&&l.removeChild(s)}function m(t){R.emit(t,s,A,d)}}function it(t){o.rm(t,"gu-hide")}function ot(t){R.dragging&&o.add(t,"gu-hide")}function st(){if(!n){var t=b.getBoundingClientRect();(n=b.cloneNode(!0)).style.width=m(t)+"px",n.style.height=p(t)+"px",o.rm(n,"gu-transit"),o.add(n,"gu-mirror"),N.mirrorContainer.appendChild(n),u(a,"add","mousemove",rt),o.add(N.mirrorContainer,"gu-unselectable"),R.emit("cloned",n,b,"mirror")}}function at(){n&&(o.rm(N.mirrorContainer,"gu-unselectable"),u(a,"remove","mousemove",rt),g(n).removeChild(n),n=null)}function ut(t,e){for(var n=e;n!==t&&g(n)!==t;)n=g(n);return n===a?null:n}function ct(t,e,n,r){var i,o="horizontal"===N.direction,s=e!==t?(i=e.getBoundingClientRect(),a(o?n>i.left+m(i)/2:r>i.top+p(i)/2)):function(){var e,i,s,a=t.children.length;for(e=0;e<a;e++){if(s=(i=t.children[e]).getBoundingClientRect(),o&&s.left+s.width/2>n)return i;if(!o&&s.top+s.height/2>r)return i}return null}();return s;function a(t){return t?E(e):e}}function lt(t,e){return"boolean"==typeof N.copy?N.copy:N.copy(t,e)}}},115:t=>{var e;e="function"==typeof setImmediate?function(t){setImmediate(t)}:function(t){setTimeout(t,0)},t.exports=e}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t,e=new Uint8Array(16);function r(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(e)}const i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(t){return"string"==typeof t&&i.test(t)};for(var s=[],a=0;a<256;++a)s.push((a+256).toString(16).substr(1));const u=function(t,e,n){var i=(t=t||{}).random||(t.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e){n=n||0;for(var a=0;a<16;++a)e[n+a]=i[a];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]).toLowerCase();if(!o(n))throw TypeError("Stringified UUID is invalid");return n}(i)};class c{constructor(){this.listeners={}}add(t,e,n,r=u()){this.listeners[r]={event:t,element:e,handler:n},e.addEventListener(t,n)}remove(t){const e=this.listeners[t];e&&(e.element.removeEventListener(e.event,e.handler),delete this.listeners[t])}}const l={todo:"Todo",doing:"Doing",done:"Done"};class d{constructor(t){this.id=t.id||u(),this.title=t.title,this.status=t.status||l.todo,console.log(t)}update(t){this.title=t.title||this.title,this.status=t.status||this.status}static validate(t){return!!(t&&o(t.id)&&t.title&&Object.values(l).includes(t.status))}}const f="TASKS";class v{constructor(){this.storage=localStorage,this.tasks=this.getStoredTasks()}add(t){this.tasks.push(t),this.updateStorage()}delete(t){this.tasks=this.tasks.filter((e=>e.id!==t.id)),this.updateStorage()}find(t){return this.tasks.find((e=>e.id===t))||null}update(t){this.tasks=this.tasks.map((e=>e.id===t.id?t:e)),this.updateStorage()}filter(t){return this.tasks.filter((({status:e})=>e===t))}moveAboveTarget(t,e){const n=this.tasks.indexOf(t),r=this.tasks.indexOf(e);this.changeOrder(t,n,n<r?r-1:r)}moveToLast(t){const e=this.tasks.indexOf(t);this.changeOrder(t,e,this.tasks.length)}changeOrder(t,e,n){this.tasks.splice(e,1),this.tasks.splice(n,0,t),this.updateStorage()}updateStorage(){this.storage.setItem(f,JSON.stringify(this.tasks))}getStoredTasks(){const t=this.storage.getItem(f);if(!t)return[];try{const e=JSON.parse(t);return function(t){if(!Array.isArray(t)||!t.every((t=>d.validate(t))))throw new Error("引数「value」は TaskObject[] 型と一致しません。")}(e),e.map((t=>new d(t)))}catch(t){return this.storage.removeItem(f),[]}}}var h=n(137),m=n.n(h);class p{constructor(t,e,n){this.todoList=t,this.doingList=e,this.doneList=n}append(t){const{taskEl:e,deleteButtonEl:n}=this.render(t);return this.todoList.append(e),{deleteButtonEl:n}}renderAll(t){return[...this.renderList(t.filter(l.todo),this.todoList),...this.renderList(t.filter(l.doing),this.doingList),...this.renderList(t.filter(l.done),this.doneList)]}render(t){const e=document.createElement("div"),n=document.createElement("span"),r=document.createElement("button");return e.id=t.id,e.classList.add("task-item"),n.textContent=t.title,r.textContent="削除",e.append(n,r),{taskEl:e,deleteButtonEl:r}}renderList(t,e){if(0===t.length)return[];const n=[];return t.forEach((t=>{const{taskEl:r,deleteButtonEl:i}=this.render(t);e.append(r),n.push({task:t,deleteButtonEl:i})})),n}remove(t){const e=document.getElementById(t.id);e&&(t.status===l.todo&&this.todoList.removeChild(e),t.status===l.doing&&this.doingList.removeChild(e),t.status===l.done&&this.doneList.removeChild(e))}subscribeDragAndDrop(t){m()([this.todoList,this.doingList,this.doneList]).on("drop",((e,n,r,i)=>{let o=l.todo;"doingList"===n.id&&(o=l.doing),"doneList"===n.id&&(o=l.done),t(e,i,o)}))}getId(t){return t.id}}class g{constructor(){this.eventListener=new c,this.taskCollection=new v,this.taskRenderer=new p(document.getElementById("todoList"),document.getElementById("doingList"),document.getElementById("doneList")),this.executeDeleteTask=t=>{this.eventListener.remove(t.id),this.taskCollection.delete(t),this.taskRenderer.remove(t)},this.handleSubmit=t=>{t.preventDefault();const e=document.getElementById("title");if(!e.value)return;const n=new d({title:e.value});this.taskCollection.add(n);const{deleteButtonEl:r}=this.taskRenderer.append(n);this.eventListener.add("click",r,(()=>this.handleClickDeleteTask(n)),n.id),e.value=""},this.handleClickDeleteTask=t=>{window.confirm(`「${t.title}」を削除しますか？`)&&this.executeDeleteTask(t)},this.handleDropAndDrop=(t,e,n)=>{const r=this.taskRenderer.getId(t);if(!r)return;const i=this.taskCollection.find(r);if(i)if(i.update({status:n}),this.taskCollection.update(i),e){const t=this.taskRenderer.getId(e);if(!t)return;const n=this.taskCollection.find(t);if(!n)return;this.taskCollection.moveAboveTarget(i,n)}else this.taskCollection.moveToLast(i)},this.handleClickDeletedAllDoneTasks=()=>{window.confirm("DONE のタスクをすべて削除しますか？")&&this.taskCollection.filter(l.done).forEach((t=>this.executeDeleteTask(t)))}}start(){const t=this.taskRenderer.renderAll(this.taskCollection),e=document.getElementById("createForm"),n=document.getElementById("deleteAllDoneTask");t.forEach((({task:t,deleteButtonEl:e})=>{this.eventListener.add("click",e,(()=>this.handleClickDeleteTask(t)),t.id)})),this.eventListener.add("submit",e,this.handleSubmit),this.eventListener.add("click",n,this.handleClickDeletedAllDoneTasks),this.taskRenderer.subscribeDragAndDrop(this.handleDropAndDrop)}}window.addEventListener("load",(()=>{(new g).start()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFFeERrQixFQUFVclcsU0FBUSxFQUFHeVMsS0FBQUEsRUFBTStCLGVBQUFBLE1BQ3pCMVUsS0FBSzJWLGNBQWNwVCxJQUFJLFFBQVNtUyxHQUM5QixJQUFNMVUsS0FBS2dXLHNCQUFzQnJELElBQU9BLEVBQUtoQixPQUdqRDNSLEtBQUsyVixjQUFjcFQsSUFBSSxTQUFVaVUsRUFBWXhXLEtBQUs4VixjQUNsRDlWLEtBQUsyVixjQUFjcFQsSUFBSSxRQUFTa1UsRUFBeUJ6VyxLQUFLc1csZ0NBRTlEdFcsS0FBSzRWLGFBQWFOLHFCQUFxQnRWLEtBQUtrVyxvQkE4RGhEeEcsT0FBTzdPLGlCQUFpQixRQUFRLE1BQ2xCLElBQUk2VSxHQUNackwsWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jyb3dzZXItYXBwLy4vbm9kZV9tb2R1bGVzL2F0b2EvYXRvYS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL25vZGVfbW9kdWxlcy9jb250cmEvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvY29udHJhL2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvY3Jvc3N2ZW50L3NyYy9jcm9zc3ZlbnQuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvY3Jvc3N2ZW50L3NyYy9ldmVudG1hcC5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL25vZGVfbW9kdWxlcy9jdXN0b20tZXZlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvZHJhZ3VsYS9jbGFzc2VzLmpzIiwid2VicGFjazovL2Jyb3dzZXItYXBwLy4vbm9kZV9tb2R1bGVzL2RyYWd1bGEvZHJhZ3VsYS5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL25vZGVfbW9kdWxlcy90aWNreS90aWNreS1icm93c2VyLmpzIiwid2VicGFjazovL2Jyb3dzZXItYXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Jyb3dzZXItYXBwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Jyb3dzZXItYXBwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Jyb3dzZXItYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzIiwid2VicGFjazovL2Jyb3dzZXItYXBwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL2Jyb3dzZXItYXBwLy4vdHMvRXZlbnRMaXN0ZW5lci50cyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL3RzL1Rhc2sudHMiLCJ3ZWJwYWNrOi8vYnJvd3Nlci1hcHAvLi90cy9UYXNrQ29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL3RzL1Rhc2tSZW5kZXJlci50cyIsIndlYnBhY2s6Ly9icm93c2VyLWFwcC8uL3RzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXRvYSAoYSwgbikgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSwgbik7IH1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRpY2t5ID0gcmVxdWlyZSgndGlja3knKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWJvdW5jZSAoZm4sIGFyZ3MsIGN0eCkge1xuICBpZiAoIWZuKSB7IHJldHVybjsgfVxuICB0aWNreShmdW5jdGlvbiBydW4gKCkge1xuICAgIGZuLmFwcGx5KGN0eCB8fCBudWxsLCBhcmdzIHx8IFtdKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXRvYSA9IHJlcXVpcmUoJ2F0b2EnKTtcbnZhciBkZWJvdW5jZSA9IHJlcXVpcmUoJy4vZGVib3VuY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbWl0dGVyICh0aGluZywgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBldnQgPSB7fTtcbiAgaWYgKHRoaW5nID09PSB1bmRlZmluZWQpIHsgdGhpbmcgPSB7fTsgfVxuICB0aGluZy5vbiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIGlmICghZXZ0W3R5cGVdKSB7XG4gICAgICBldnRbdHlwZV0gPSBbZm5dO1xuICAgIH0gZWxzZSB7XG4gICAgICBldnRbdHlwZV0ucHVzaChmbik7XG4gICAgfVxuICAgIHJldHVybiB0aGluZztcbiAgfTtcbiAgdGhpbmcub25jZSA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIGZuLl9vbmNlID0gdHJ1ZTsgLy8gdGhpbmcub2ZmKGZuKSBzdGlsbCB3b3JrcyFcbiAgICB0aGluZy5vbih0eXBlLCBmbik7XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5vZmYgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGMgPT09IDEpIHtcbiAgICAgIGRlbGV0ZSBldnRbdHlwZV07XG4gICAgfSBlbHNlIGlmIChjID09PSAwKSB7XG4gICAgICBldnQgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGV0ID0gZXZ0W3R5cGVdO1xuICAgICAgaWYgKCFldCkgeyByZXR1cm4gdGhpbmc7IH1cbiAgICAgIGV0LnNwbGljZShldC5pbmRleE9mKGZuKSwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGluZztcbiAgfTtcbiAgdGhpbmcuZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGF0b2EoYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpbmcuZW1pdHRlclNuYXBzaG90KGFyZ3Muc2hpZnQoKSkuYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG4gIHRoaW5nLmVtaXR0ZXJTbmFwc2hvdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIGV0ID0gKGV2dFt0eXBlXSB8fCBbXSkuc2xpY2UoMCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gYXRvYShhcmd1bWVudHMpO1xuICAgICAgdmFyIGN0eCA9IHRoaXMgfHwgdGhpbmc7XG4gICAgICBpZiAodHlwZSA9PT0gJ2Vycm9yJyAmJiBvcHRzLnRocm93cyAhPT0gZmFsc2UgJiYgIWV0Lmxlbmd0aCkgeyB0aHJvdyBhcmdzLmxlbmd0aCA9PT0gMSA/IGFyZ3NbMF0gOiBhcmdzOyB9XG4gICAgICBldC5mb3JFYWNoKGZ1bmN0aW9uIGVtaXR0ZXIgKGxpc3Rlbikge1xuICAgICAgICBpZiAob3B0cy5hc3luYykgeyBkZWJvdW5jZShsaXN0ZW4sIGFyZ3MsIGN0eCk7IH0gZWxzZSB7IGxpc3Rlbi5hcHBseShjdHgsIGFyZ3MpOyB9XG4gICAgICAgIGlmIChsaXN0ZW4uX29uY2UpIHsgdGhpbmcub2ZmKHR5cGUsIGxpc3Rlbik7IH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaW5nO1xuICAgIH07XG4gIH07XG4gIHJldHVybiB0aGluZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXN0b21FdmVudCA9IHJlcXVpcmUoJ2N1c3RvbS1ldmVudCcpO1xudmFyIGV2ZW50bWFwID0gcmVxdWlyZSgnLi9ldmVudG1hcCcpO1xudmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBhZGRFdmVudCA9IGFkZEV2ZW50RWFzeTtcbnZhciByZW1vdmVFdmVudCA9IHJlbW92ZUV2ZW50RWFzeTtcbnZhciBoYXJkQ2FjaGUgPSBbXTtcblxuaWYgKCFnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICBhZGRFdmVudCA9IGFkZEV2ZW50SGFyZDtcbiAgcmVtb3ZlRXZlbnQgPSByZW1vdmVFdmVudEhhcmQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZEV2ZW50LFxuICByZW1vdmU6IHJlbW92ZUV2ZW50LFxuICBmYWJyaWNhdGU6IGZhYnJpY2F0ZUV2ZW50XG59O1xuXG5mdW5jdGlvbiBhZGRFdmVudEVhc3kgKGVsLCB0eXBlLCBmbiwgY2FwdHVyaW5nKSB7XG4gIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBjYXB0dXJpbmcpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudEhhcmQgKGVsLCB0eXBlLCBmbikge1xuICByZXR1cm4gZWwuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIHdyYXAoZWwsIHR5cGUsIGZuKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50RWFzeSAoZWwsIHR5cGUsIGZuLCBjYXB0dXJpbmcpIHtcbiAgcmV0dXJuIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGNhcHR1cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50SGFyZCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBsaXN0ZW5lciA9IHVud3JhcChlbCwgdHlwZSwgZm4pO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICByZXR1cm4gZWwuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmYWJyaWNhdGVFdmVudCAoZWwsIHR5cGUsIG1vZGVsKSB7XG4gIHZhciBlID0gZXZlbnRtYXAuaW5kZXhPZih0eXBlKSA9PT0gLTEgPyBtYWtlQ3VzdG9tRXZlbnQoKSA6IG1ha2VDbGFzc2ljRXZlbnQoKTtcbiAgaWYgKGVsLmRpc3BhdGNoRXZlbnQpIHtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xuICB9IGVsc2Uge1xuICAgIGVsLmZpcmVFdmVudCgnb24nICsgdHlwZSwgZSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUNsYXNzaWNFdmVudCAoKSB7XG4gICAgdmFyIGU7XG4gICAgaWYgKGRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgZSA9IGRvYy5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KSB7XG4gICAgICBlID0gZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VDdXN0b21FdmVudCAoKSB7XG4gICAgcmV0dXJuIG5ldyBjdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbDogbW9kZWwgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcHBlckZhY3RvcnkgKGVsLCB0eXBlLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcHBlciAob3JpZ2luYWxFdmVudCkge1xuICAgIHZhciBlID0gb3JpZ2luYWxFdmVudCB8fCBnbG9iYWwuZXZlbnQ7XG4gICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCA9IGUucHJldmVudERlZmF1bHQgfHwgZnVuY3Rpb24gcHJldmVudERlZmF1bHQgKCkgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH07XG4gICAgZS5zdG9wUHJvcGFnYXRpb24gPSBlLnN0b3BQcm9wYWdhdGlvbiB8fCBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24gKCkgeyBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7IH07XG4gICAgZS53aGljaCA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuICAgIGZuLmNhbGwoZWwsIGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3cmFwIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIHdyYXBwZXIgPSB1bndyYXAoZWwsIHR5cGUsIGZuKSB8fCB3cmFwcGVyRmFjdG9yeShlbCwgdHlwZSwgZm4pO1xuICBoYXJkQ2FjaGUucHVzaCh7XG4gICAgd3JhcHBlcjogd3JhcHBlcixcbiAgICBlbGVtZW50OiBlbCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGZuOiBmblxuICB9KTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbmZ1bmN0aW9uIHVud3JhcCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBpID0gZmluZChlbCwgdHlwZSwgZm4pO1xuICBpZiAoaSkge1xuICAgIHZhciB3cmFwcGVyID0gaGFyZENhY2hlW2ldLndyYXBwZXI7XG4gICAgaGFyZENhY2hlLnNwbGljZShpLCAxKTsgLy8gZnJlZSB1cCBhIHRhZCBvZiBtZW1vcnlcbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIGksIGl0ZW07XG4gIGZvciAoaSA9IDA7IGkgPCBoYXJkQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVtID0gaGFyZENhY2hlW2ldO1xuICAgIGlmIChpdGVtLmVsZW1lbnQgPT09IGVsICYmIGl0ZW0udHlwZSA9PT0gdHlwZSAmJiBpdGVtLmZuID09PSBmbikge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBldmVudG1hcCA9IFtdO1xudmFyIGV2ZW50bmFtZSA9ICcnO1xudmFyIHJvbiA9IC9eb24vO1xuXG5mb3IgKGV2ZW50bmFtZSBpbiBnbG9iYWwpIHtcbiAgaWYgKHJvbi50ZXN0KGV2ZW50bmFtZSkpIHtcbiAgICBldmVudG1hcC5wdXNoKGV2ZW50bmFtZS5zbGljZSgyKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBldmVudG1hcDtcbiIsIlxudmFyIE5hdGl2ZUN1c3RvbUV2ZW50ID0gZ2xvYmFsLkN1c3RvbUV2ZW50O1xuXG5mdW5jdGlvbiB1c2VOYXRpdmUgKCkge1xuICB0cnkge1xuICAgIHZhciBwID0gbmV3IE5hdGl2ZUN1c3RvbUV2ZW50KCdjYXQnLCB7IGRldGFpbDogeyBmb286ICdiYXInIH0gfSk7XG4gICAgcmV0dXJuICAnY2F0JyA9PT0gcC50eXBlICYmICdiYXInID09PSBwLmRldGFpbC5mb287XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ3Jvc3MtYnJvd3NlciBgQ3VzdG9tRXZlbnRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC5DdXN0b21FdmVudFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZU5hdGl2ZSgpID8gTmF0aXZlQ3VzdG9tRXZlbnQgOlxuXG4vLyBJRSA+PSA5XG4ndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGRvY3VtZW50ICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA/IGZ1bmN0aW9uIEN1c3RvbUV2ZW50ICh0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgaWYgKHBhcmFtcykge1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gIH0gZWxzZSB7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlLCB2b2lkIDApO1xuICB9XG4gIHJldHVybiBlO1xufSA6XG5cbi8vIElFIDw9IDhcbmZ1bmN0aW9uIEN1c3RvbUV2ZW50ICh0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xuICBlLnR5cGUgPSB0eXBlO1xuICBpZiAocGFyYW1zKSB7XG4gICAgZS5idWJibGVzID0gQm9vbGVhbihwYXJhbXMuYnViYmxlcyk7XG4gICAgZS5jYW5jZWxhYmxlID0gQm9vbGVhbihwYXJhbXMuY2FuY2VsYWJsZSk7XG4gICAgZS5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICB9IGVsc2Uge1xuICAgIGUuYnViYmxlcyA9IGZhbHNlO1xuICAgIGUuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIGUuZGV0YWlsID0gdm9pZCAwO1xuICB9XG4gIHJldHVybiBlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBzdGFydCA9ICcoPzpefFxcXFxzKSc7XG52YXIgZW5kID0gJyg/OlxcXFxzfCQpJztcblxuZnVuY3Rpb24gbG9va3VwQ2xhc3MgKGNsYXNzTmFtZSkge1xuICB2YXIgY2FjaGVkID0gY2FjaGVbY2xhc3NOYW1lXTtcbiAgaWYgKGNhY2hlZCkge1xuICAgIGNhY2hlZC5sYXN0SW5kZXggPSAwO1xuICB9IGVsc2Uge1xuICAgIGNhY2hlW2NsYXNzTmFtZV0gPSBjYWNoZWQgPSBuZXcgUmVnRXhwKHN0YXJ0ICsgY2xhc3NOYW1lICsgZW5kLCAnZycpO1xuICB9XG4gIHJldHVybiBjYWNoZWQ7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xhc3NOYW1lKSB7XG4gIHZhciBjdXJyZW50ID0gZWwuY2xhc3NOYW1lO1xuICBpZiAoIWN1cnJlbnQubGVuZ3RoKSB7XG4gICAgZWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICB9IGVsc2UgaWYgKCFsb29rdXBDbGFzcyhjbGFzc05hbWUpLnRlc3QoY3VycmVudCkpIHtcbiAgICBlbC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJtQ2xhc3MgKGVsLCBjbGFzc05hbWUpIHtcbiAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobG9va3VwQ2xhc3MoY2xhc3NOYW1lKSwgJyAnKS50cmltKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZENsYXNzLFxuICBybTogcm1DbGFzc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVtaXR0ZXIgPSByZXF1aXJlKCdjb250cmEvZW1pdHRlcicpO1xudmFyIGNyb3NzdmVudCA9IHJlcXVpcmUoJ2Nyb3NzdmVudCcpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCcuL2NsYXNzZXMnKTtcbnZhciBkb2MgPSBkb2N1bWVudDtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5mdW5jdGlvbiBkcmFndWxhIChpbml0aWFsQ29udGFpbmVycywgb3B0aW9ucykge1xuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGluaXRpYWxDb250YWluZXJzKSA9PT0gZmFsc2UpIHtcbiAgICBvcHRpb25zID0gaW5pdGlhbENvbnRhaW5lcnM7XG4gICAgaW5pdGlhbENvbnRhaW5lcnMgPSBbXTtcbiAgfVxuICB2YXIgX21pcnJvcjsgLy8gbWlycm9yIGltYWdlXG4gIHZhciBfc291cmNlOyAvLyBzb3VyY2UgY29udGFpbmVyXG4gIHZhciBfaXRlbTsgLy8gaXRlbSBiZWluZyBkcmFnZ2VkXG4gIHZhciBfb2Zmc2V0WDsgLy8gcmVmZXJlbmNlIHhcbiAgdmFyIF9vZmZzZXRZOyAvLyByZWZlcmVuY2UgeVxuICB2YXIgX21vdmVYOyAvLyByZWZlcmVuY2UgbW92ZSB4XG4gIHZhciBfbW92ZVk7IC8vIHJlZmVyZW5jZSBtb3ZlIHlcbiAgdmFyIF9pbml0aWFsU2libGluZzsgLy8gcmVmZXJlbmNlIHNpYmxpbmcgd2hlbiBncmFiYmVkXG4gIHZhciBfY3VycmVudFNpYmxpbmc7IC8vIHJlZmVyZW5jZSBzaWJsaW5nIG5vd1xuICB2YXIgX2NvcHk7IC8vIGl0ZW0gdXNlZCBmb3IgY29weWluZ1xuICB2YXIgX3JlbmRlclRpbWVyOyAvLyB0aW1lciBmb3Igc2V0VGltZW91dCByZW5kZXJNaXJyb3JJbWFnZVxuICB2YXIgX2xhc3REcm9wVGFyZ2V0ID0gbnVsbDsgLy8gbGFzdCBjb250YWluZXIgaXRlbSB3YXMgb3ZlclxuICB2YXIgX2dyYWJiZWQ7IC8vIGhvbGRzIG1vdXNlZG93biBjb250ZXh0IHVudGlsIGZpcnN0IG1vdXNlbW92ZVxuXG4gIHZhciBvID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKG8ubW92ZXMgPT09IHZvaWQgMCkgeyBvLm1vdmVzID0gYWx3YXlzOyB9XG4gIGlmIChvLmFjY2VwdHMgPT09IHZvaWQgMCkgeyBvLmFjY2VwdHMgPSBhbHdheXM7IH1cbiAgaWYgKG8uaW52YWxpZCA9PT0gdm9pZCAwKSB7IG8uaW52YWxpZCA9IGludmFsaWRUYXJnZXQ7IH1cbiAgaWYgKG8uY29udGFpbmVycyA9PT0gdm9pZCAwKSB7IG8uY29udGFpbmVycyA9IGluaXRpYWxDb250YWluZXJzIHx8IFtdOyB9XG4gIGlmIChvLmlzQ29udGFpbmVyID09PSB2b2lkIDApIHsgby5pc0NvbnRhaW5lciA9IG5ldmVyOyB9XG4gIGlmIChvLmNvcHkgPT09IHZvaWQgMCkgeyBvLmNvcHkgPSBmYWxzZTsgfVxuICBpZiAoby5jb3B5U29ydFNvdXJjZSA9PT0gdm9pZCAwKSB7IG8uY29weVNvcnRTb3VyY2UgPSBmYWxzZTsgfVxuICBpZiAoby5yZXZlcnRPblNwaWxsID09PSB2b2lkIDApIHsgby5yZXZlcnRPblNwaWxsID0gZmFsc2U7IH1cbiAgaWYgKG8ucmVtb3ZlT25TcGlsbCA9PT0gdm9pZCAwKSB7IG8ucmVtb3ZlT25TcGlsbCA9IGZhbHNlOyB9XG4gIGlmIChvLmRpcmVjdGlvbiA9PT0gdm9pZCAwKSB7IG8uZGlyZWN0aW9uID0gJ3ZlcnRpY2FsJzsgfVxuICBpZiAoby5pZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24gPT09IHZvaWQgMCkgeyBvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbiA9IHRydWU7IH1cbiAgaWYgKG8ubWlycm9yQ29udGFpbmVyID09PSB2b2lkIDApIHsgby5taXJyb3JDb250YWluZXIgPSBkb2MuYm9keTsgfVxuXG4gIHZhciBkcmFrZSA9IGVtaXR0ZXIoe1xuICAgIGNvbnRhaW5lcnM6IG8uY29udGFpbmVycyxcbiAgICBzdGFydDogbWFudWFsU3RhcnQsXG4gICAgZW5kOiBlbmQsXG4gICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBjYW5Nb3ZlOiBjYW5Nb3ZlLFxuICAgIGRyYWdnaW5nOiBmYWxzZVxuICB9KTtcblxuICBpZiAoby5yZW1vdmVPblNwaWxsID09PSB0cnVlKSB7XG4gICAgZHJha2Uub24oJ292ZXInLCBzcGlsbE92ZXIpLm9uKCdvdXQnLCBzcGlsbE91dCk7XG4gIH1cblxuICBldmVudHMoKTtcblxuICByZXR1cm4gZHJha2U7XG5cbiAgZnVuY3Rpb24gaXNDb250YWluZXIgKGVsKSB7XG4gICAgcmV0dXJuIGRyYWtlLmNvbnRhaW5lcnMuaW5kZXhPZihlbCkgIT09IC0xIHx8IG8uaXNDb250YWluZXIoZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsIG9wLCAnbW91c2Vkb3duJywgZ3JhYik7XG4gICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgb3AsICdtb3VzZXVwJywgcmVsZWFzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHVhbE1vdmVtZW50cyAocmVtb3ZlKSB7XG4gICAgdmFyIG9wID0gcmVtb3ZlID8gJ3JlbW92ZScgOiAnYWRkJztcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCBvcCwgJ21vdXNlbW92ZScsIHN0YXJ0QmVjYXVzZU1vdXNlTW92ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZW1lbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIGNyb3NzdmVudFtvcF0oZG9jdW1lbnRFbGVtZW50LCAnc2VsZWN0c3RhcnQnLCBwcmV2ZW50R3JhYmJlZCk7IC8vIElFOFxuICAgIGNyb3NzdmVudFtvcF0oZG9jdW1lbnRFbGVtZW50LCAnY2xpY2snLCBwcmV2ZW50R3JhYmJlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICBldmVudHModHJ1ZSk7XG4gICAgcmVsZWFzZSh7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmV2ZW50R3JhYmJlZCAoZSkge1xuICAgIGlmIChfZ3JhYmJlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdyYWIgKGUpIHtcbiAgICBfbW92ZVggPSBlLmNsaWVudFg7XG4gICAgX21vdmVZID0gZS5jbGllbnRZO1xuXG4gICAgdmFyIGlnbm9yZSA9IHdoaWNoTW91c2VCdXR0b24oZSkgIT09IDEgfHwgZS5tZXRhS2V5IHx8IGUuY3RybEtleTtcbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICByZXR1cm47IC8vIHdlIG9ubHkgY2FyZSBhYm91dCBob25lc3QtdG8tZ29kIGxlZnQgY2xpY2tzIGFuZCB0b3VjaCBldmVudHNcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBlLnRhcmdldDtcbiAgICB2YXIgY29udGV4dCA9IGNhblN0YXJ0KGl0ZW0pO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfZ3JhYmJlZCA9IGNvbnRleHQ7XG4gICAgZXZlbnR1YWxNb3ZlbWVudHMoKTtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgaWYgKGlzSW5wdXQoaXRlbSkpIHsgLy8gc2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8yMDhcbiAgICAgICAgaXRlbS5mb2N1cygpOyAvLyBmaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMTc2XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIGZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8xNTVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydEJlY2F1c2VNb3VzZU1vdmVkIChlKSB7XG4gICAgaWYgKCFfZ3JhYmJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAod2hpY2hNb3VzZUJ1dHRvbihlKSA9PT0gMCkge1xuICAgICAgcmVsZWFzZSh7fSk7XG4gICAgICByZXR1cm47IC8vIHdoZW4gdGV4dCBpcyBzZWxlY3RlZCBvbiBhbiBpbnB1dCBhbmQgdGhlbiBkcmFnZ2VkLCBtb3VzZXVwIGRvZXNuJ3QgZmlyZS4gdGhpcyBpcyBvdXIgb25seSBob3BlXG4gICAgfVxuXG4gICAgLy8gdHJ1dGh5IGNoZWNrIGZpeGVzICMyMzksIGVxdWFsaXR5IGZpeGVzICMyMDcsIGZpeGVzICM1MDFcbiAgICBpZiAoKGUuY2xpZW50WCAhPT0gdm9pZCAwICYmIE1hdGguYWJzKGUuY2xpZW50WCAtIF9tb3ZlWCkgPD0gKG8uc2xpZGVGYWN0b3JYIHx8IDApKSAmJlxuICAgICAgKGUuY2xpZW50WSAhPT0gdm9pZCAwICYmIE1hdGguYWJzKGUuY2xpZW50WSAtIF9tb3ZlWSkgPD0gKG8uc2xpZGVGYWN0b3JZIHx8IDApKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbikge1xuICAgICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpIHx8IDA7XG4gICAgICB2YXIgY2xpZW50WSA9IGdldENvb3JkKCdjbGllbnRZJywgZSkgfHwgMDtcbiAgICAgIHZhciBlbGVtZW50QmVoaW5kQ3Vyc29yID0gZG9jLmVsZW1lbnRGcm9tUG9pbnQoY2xpZW50WCwgY2xpZW50WSk7XG4gICAgICBpZiAoaXNJbnB1dChlbGVtZW50QmVoaW5kQ3Vyc29yKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGdyYWJiZWQgPSBfZ3JhYmJlZDsgLy8gY2FsbCB0byBlbmQoKSB1bnNldHMgX2dyYWJiZWRcbiAgICBldmVudHVhbE1vdmVtZW50cyh0cnVlKTtcbiAgICBtb3ZlbWVudHMoKTtcbiAgICBlbmQoKTtcbiAgICBzdGFydChncmFiYmVkKTtcblxuICAgIHZhciBvZmZzZXQgPSBnZXRPZmZzZXQoX2l0ZW0pO1xuICAgIF9vZmZzZXRYID0gZ2V0Q29vcmQoJ3BhZ2VYJywgZSkgLSBvZmZzZXQubGVmdDtcbiAgICBfb2Zmc2V0WSA9IGdldENvb3JkKCdwYWdlWScsIGUpIC0gb2Zmc2V0LnRvcDtcblxuICAgIGNsYXNzZXMuYWRkKF9jb3B5IHx8IF9pdGVtLCAnZ3UtdHJhbnNpdCcpO1xuICAgIHJlbmRlck1pcnJvckltYWdlKCk7XG4gICAgZHJhZyhlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhblN0YXJ0IChpdGVtKSB7XG4gICAgaWYgKGRyYWtlLmRyYWdnaW5nICYmIF9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzQ29udGFpbmVyKGl0ZW0pKSB7XG4gICAgICByZXR1cm47IC8vIGRvbid0IGRyYWcgY29udGFpbmVyIGl0c2VsZlxuICAgIH1cbiAgICB2YXIgaGFuZGxlID0gaXRlbTtcbiAgICB3aGlsZSAoZ2V0UGFyZW50KGl0ZW0pICYmIGlzQ29udGFpbmVyKGdldFBhcmVudChpdGVtKSkgPT09IGZhbHNlKSB7XG4gICAgICBpZiAoby5pbnZhbGlkKGl0ZW0sIGhhbmRsZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaXRlbSA9IGdldFBhcmVudChpdGVtKTsgLy8gZHJhZyB0YXJnZXQgc2hvdWxkIGJlIGEgdG9wIGVsZW1lbnRcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzb3VyY2UgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG8uaW52YWxpZChpdGVtLCBoYW5kbGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1vdmFibGUgPSBvLm1vdmVzKGl0ZW0sIHNvdXJjZSwgaGFuZGxlLCBuZXh0RWwoaXRlbSkpO1xuICAgIGlmICghbW92YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpdGVtOiBpdGVtLFxuICAgICAgc291cmNlOiBzb3VyY2VcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuTW92ZSAoaXRlbSkge1xuICAgIHJldHVybiAhIWNhblN0YXJ0KGl0ZW0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFudWFsU3RhcnQgKGl0ZW0pIHtcbiAgICB2YXIgY29udGV4dCA9IGNhblN0YXJ0KGl0ZW0pO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBzdGFydChjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCAoY29udGV4dCkge1xuICAgIGlmIChpc0NvcHkoY29udGV4dC5pdGVtLCBjb250ZXh0LnNvdXJjZSkpIHtcbiAgICAgIF9jb3B5ID0gY29udGV4dC5pdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIGRyYWtlLmVtaXQoJ2Nsb25lZCcsIF9jb3B5LCBjb250ZXh0Lml0ZW0sICdjb3B5Jyk7XG4gICAgfVxuXG4gICAgX3NvdXJjZSA9IGNvbnRleHQuc291cmNlO1xuICAgIF9pdGVtID0gY29udGV4dC5pdGVtO1xuICAgIF9pbml0aWFsU2libGluZyA9IF9jdXJyZW50U2libGluZyA9IG5leHRFbChjb250ZXh0Lml0ZW0pO1xuXG4gICAgZHJha2UuZHJhZ2dpbmcgPSB0cnVlO1xuICAgIGRyYWtlLmVtaXQoJ2RyYWcnLCBfaXRlbSwgX3NvdXJjZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZhbGlkVGFyZ2V0ICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmQgKCkge1xuICAgIGlmICghZHJha2UuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICBkcm9wKGl0ZW0sIGdldFBhcmVudChpdGVtKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1bmdyYWIgKCkge1xuICAgIF9ncmFiYmVkID0gZmFsc2U7XG4gICAgZXZlbnR1YWxNb3ZlbWVudHModHJ1ZSk7XG4gICAgbW92ZW1lbnRzKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVsZWFzZSAoZSkge1xuICAgIHVuZ3JhYigpO1xuXG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHZhciBjbGllbnRYID0gZ2V0Q29vcmQoJ2NsaWVudFgnLCBlKSB8fCAwO1xuICAgIHZhciBjbGllbnRZID0gZ2V0Q29vcmQoJ2NsaWVudFknLCBlKSB8fCAwO1xuICAgIHZhciBlbGVtZW50QmVoaW5kQ3Vyc29yID0gZ2V0RWxlbWVudEJlaGluZFBvaW50KF9taXJyb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIHZhciBkcm9wVGFyZ2V0ID0gZmluZERyb3BUYXJnZXQoZWxlbWVudEJlaGluZEN1cnNvciwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgaWYgKGRyb3BUYXJnZXQgJiYgKChfY29weSAmJiBvLmNvcHlTb3J0U291cmNlKSB8fCAoIV9jb3B5IHx8IGRyb3BUYXJnZXQgIT09IF9zb3VyY2UpKSkge1xuICAgICAgZHJvcChpdGVtLCBkcm9wVGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKG8ucmVtb3ZlT25TcGlsbCkge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyb3AgKGl0ZW0sIHRhcmdldCkge1xuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgaWYgKF9jb3B5ICYmIG8uY29weVNvcnRTb3VyY2UgJiYgdGFyZ2V0ID09PSBfc291cmNlKSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX2l0ZW0pO1xuICAgIH1cbiAgICBpZiAoaXNJbml0aWFsUGxhY2VtZW50KHRhcmdldCkpIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2NhbmNlbCcsIGl0ZW0sIF9zb3VyY2UsIF9zb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFrZS5lbWl0KCdkcm9wJywgaXRlbSwgdGFyZ2V0LCBfc291cmNlLCBfY3VycmVudFNpYmxpbmcpO1xuICAgIH1cbiAgICBjbGVhbnVwKCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIGlmICghZHJha2UuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICB9XG4gICAgZHJha2UuZW1pdChfY29weSA/ICdjYW5jZWwnIDogJ3JlbW92ZScsIGl0ZW0sIHBhcmVudCwgX3NvdXJjZSk7XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsIChyZXZlcnQpIHtcbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZXZlcnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyByZXZlcnQgOiBvLnJldmVydE9uU3BpbGw7XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIHZhciBpbml0aWFsID0gaXNJbml0aWFsUGxhY2VtZW50KHBhcmVudCk7XG4gICAgaWYgKGluaXRpYWwgPT09IGZhbHNlICYmIHJldmVydHMpIHtcbiAgICAgIGlmIChfY29weSkge1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF9jb3B5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3NvdXJjZS5pbnNlcnRCZWZvcmUoaXRlbSwgX2luaXRpYWxTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluaXRpYWwgfHwgcmV2ZXJ0cykge1xuICAgICAgZHJha2UuZW1pdCgnY2FuY2VsJywgaXRlbSwgX3NvdXJjZSwgX3NvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2Ryb3AnLCBpdGVtLCBwYXJlbnQsIF9zb3VyY2UsIF9jdXJyZW50U2libGluZyk7XG4gICAgfVxuICAgIGNsZWFudXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdW5ncmFiKCk7XG4gICAgcmVtb3ZlTWlycm9ySW1hZ2UoKTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgY2xhc3Nlcy5ybShpdGVtLCAnZ3UtdHJhbnNpdCcpO1xuICAgIH1cbiAgICBpZiAoX3JlbmRlclRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3JlbmRlclRpbWVyKTtcbiAgICB9XG4gICAgZHJha2UuZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICBpZiAoX2xhc3REcm9wVGFyZ2V0KSB7XG4gICAgICBkcmFrZS5lbWl0KCdvdXQnLCBpdGVtLCBfbGFzdERyb3BUYXJnZXQsIF9zb3VyY2UpO1xuICAgIH1cbiAgICBkcmFrZS5lbWl0KCdkcmFnZW5kJywgaXRlbSk7XG4gICAgX3NvdXJjZSA9IF9pdGVtID0gX2NvcHkgPSBfaW5pdGlhbFNpYmxpbmcgPSBfY3VycmVudFNpYmxpbmcgPSBfcmVuZGVyVGltZXIgPSBfbGFzdERyb3BUYXJnZXQgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJbml0aWFsUGxhY2VtZW50ICh0YXJnZXQsIHMpIHtcbiAgICB2YXIgc2libGluZztcbiAgICBpZiAocyAhPT0gdm9pZCAwKSB7XG4gICAgICBzaWJsaW5nID0gcztcbiAgICB9IGVsc2UgaWYgKF9taXJyb3IpIHtcbiAgICAgIHNpYmxpbmcgPSBfY3VycmVudFNpYmxpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpYmxpbmcgPSBuZXh0RWwoX2NvcHkgfHwgX2l0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0ID09PSBfc291cmNlICYmIHNpYmxpbmcgPT09IF9pbml0aWFsU2libGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmREcm9wVGFyZ2V0IChlbGVtZW50QmVoaW5kQ3Vyc29yLCBjbGllbnRYLCBjbGllbnRZKSB7XG4gICAgdmFyIHRhcmdldCA9IGVsZW1lbnRCZWhpbmRDdXJzb3I7XG4gICAgd2hpbGUgKHRhcmdldCAmJiAhYWNjZXB0ZWQoKSkge1xuICAgICAgdGFyZ2V0ID0gZ2V0UGFyZW50KHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG5cbiAgICBmdW5jdGlvbiBhY2NlcHRlZCAoKSB7XG4gICAgICB2YXIgZHJvcHBhYmxlID0gaXNDb250YWluZXIodGFyZ2V0KTtcbiAgICAgIGlmIChkcm9wcGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGltbWVkaWF0ZSA9IGdldEltbWVkaWF0ZUNoaWxkKHRhcmdldCwgZWxlbWVudEJlaGluZEN1cnNvcik7XG4gICAgICB2YXIgcmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlKHRhcmdldCwgaW1tZWRpYXRlLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICAgIHZhciBpbml0aWFsID0gaXNJbml0aWFsUGxhY2VtZW50KHRhcmdldCwgcmVmZXJlbmNlKTtcbiAgICAgIGlmIChpbml0aWFsKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gZHJvcCBpdCByaWdodCBiYWNrIHdoZXJlIGl0IHdhc1xuICAgICAgfVxuICAgICAgcmV0dXJuIG8uYWNjZXB0cyhfaXRlbSwgdGFyZ2V0LCBfc291cmNlLCByZWZlcmVuY2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWcgKGUpIHtcbiAgICBpZiAoIV9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpIHx8IDA7XG4gICAgdmFyIGNsaWVudFkgPSBnZXRDb29yZCgnY2xpZW50WScsIGUpIHx8IDA7XG4gICAgdmFyIHggPSBjbGllbnRYIC0gX29mZnNldFg7XG4gICAgdmFyIHkgPSBjbGllbnRZIC0gX29mZnNldFk7XG5cbiAgICBfbWlycm9yLnN0eWxlLmxlZnQgPSB4ICsgJ3B4JztcbiAgICBfbWlycm9yLnN0eWxlLnRvcCA9IHkgKyAncHgnO1xuXG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgZWxlbWVudEJlaGluZEN1cnNvciA9IGdldEVsZW1lbnRCZWhpbmRQb2ludChfbWlycm9yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB2YXIgZHJvcFRhcmdldCA9IGZpbmREcm9wVGFyZ2V0KGVsZW1lbnRCZWhpbmRDdXJzb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIHZhciBjaGFuZ2VkID0gZHJvcFRhcmdldCAhPT0gbnVsbCAmJiBkcm9wVGFyZ2V0ICE9PSBfbGFzdERyb3BUYXJnZXQ7XG4gICAgaWYgKGNoYW5nZWQgfHwgZHJvcFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgb3V0KCk7XG4gICAgICBfbGFzdERyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0O1xuICAgICAgb3ZlcigpO1xuICAgIH1cbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChkcm9wVGFyZ2V0ID09PSBfc291cmNlICYmIF9jb3B5ICYmICFvLmNvcHlTb3J0U291cmNlKSB7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlZmVyZW5jZTtcbiAgICB2YXIgaW1tZWRpYXRlID0gZ2V0SW1tZWRpYXRlQ2hpbGQoZHJvcFRhcmdldCwgZWxlbWVudEJlaGluZEN1cnNvcik7XG4gICAgaWYgKGltbWVkaWF0ZSAhPT0gbnVsbCkge1xuICAgICAgcmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlKGRyb3BUYXJnZXQsIGltbWVkaWF0ZSwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgfSBlbHNlIGlmIChvLnJldmVydE9uU3BpbGwgPT09IHRydWUgJiYgIV9jb3B5KSB7XG4gICAgICByZWZlcmVuY2UgPSBfaW5pdGlhbFNpYmxpbmc7XG4gICAgICBkcm9wVGFyZ2V0ID0gX3NvdXJjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKF9jb3B5ICYmIHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChyZWZlcmVuY2UgPT09IG51bGwgJiYgY2hhbmdlZCkgfHxcbiAgICAgIHJlZmVyZW5jZSAhPT0gaXRlbSAmJlxuICAgICAgcmVmZXJlbmNlICE9PSBuZXh0RWwoaXRlbSlcbiAgICApIHtcbiAgICAgIF9jdXJyZW50U2libGluZyA9IHJlZmVyZW5jZTtcbiAgICAgIGRyb3BUYXJnZXQuaW5zZXJ0QmVmb3JlKGl0ZW0sIHJlZmVyZW5jZSk7XG4gICAgICBkcmFrZS5lbWl0KCdzaGFkb3cnLCBpdGVtLCBkcm9wVGFyZ2V0LCBfc291cmNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbW92ZWQgKHR5cGUpIHsgZHJha2UuZW1pdCh0eXBlLCBpdGVtLCBfbGFzdERyb3BUYXJnZXQsIF9zb3VyY2UpOyB9XG4gICAgZnVuY3Rpb24gb3ZlciAoKSB7IGlmIChjaGFuZ2VkKSB7IG1vdmVkKCdvdmVyJyk7IH0gfVxuICAgIGZ1bmN0aW9uIG91dCAoKSB7IGlmIChfbGFzdERyb3BUYXJnZXQpIHsgbW92ZWQoJ291dCcpOyB9IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNwaWxsT3ZlciAoZWwpIHtcbiAgICBjbGFzc2VzLnJtKGVsLCAnZ3UtaGlkZScpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BpbGxPdXQgKGVsKSB7XG4gICAgaWYgKGRyYWtlLmRyYWdnaW5nKSB7IGNsYXNzZXMuYWRkKGVsLCAnZ3UtaGlkZScpOyB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJNaXJyb3JJbWFnZSAoKSB7XG4gICAgaWYgKF9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlY3QgPSBfaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBfbWlycm9yID0gX2l0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgIF9taXJyb3Iuc3R5bGUud2lkdGggPSBnZXRSZWN0V2lkdGgocmVjdCkgKyAncHgnO1xuICAgIF9taXJyb3Iuc3R5bGUuaGVpZ2h0ID0gZ2V0UmVjdEhlaWdodChyZWN0KSArICdweCc7XG4gICAgY2xhc3Nlcy5ybShfbWlycm9yLCAnZ3UtdHJhbnNpdCcpO1xuICAgIGNsYXNzZXMuYWRkKF9taXJyb3IsICdndS1taXJyb3InKTtcbiAgICBvLm1pcnJvckNvbnRhaW5lci5hcHBlbmRDaGlsZChfbWlycm9yKTtcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCAnYWRkJywgJ21vdXNlbW92ZScsIGRyYWcpO1xuICAgIGNsYXNzZXMuYWRkKG8ubWlycm9yQ29udGFpbmVyLCAnZ3UtdW5zZWxlY3RhYmxlJyk7XG4gICAgZHJha2UuZW1pdCgnY2xvbmVkJywgX21pcnJvciwgX2l0ZW0sICdtaXJyb3InKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1pcnJvckltYWdlICgpIHtcbiAgICBpZiAoX21pcnJvcikge1xuICAgICAgY2xhc3Nlcy5ybShvLm1pcnJvckNvbnRhaW5lciwgJ2d1LXVuc2VsZWN0YWJsZScpO1xuICAgICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgJ3JlbW92ZScsICdtb3VzZW1vdmUnLCBkcmFnKTtcbiAgICAgIGdldFBhcmVudChfbWlycm9yKS5yZW1vdmVDaGlsZChfbWlycm9yKTtcbiAgICAgIF9taXJyb3IgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEltbWVkaWF0ZUNoaWxkIChkcm9wVGFyZ2V0LCB0YXJnZXQpIHtcbiAgICB2YXIgaW1tZWRpYXRlID0gdGFyZ2V0O1xuICAgIHdoaWxlIChpbW1lZGlhdGUgIT09IGRyb3BUYXJnZXQgJiYgZ2V0UGFyZW50KGltbWVkaWF0ZSkgIT09IGRyb3BUYXJnZXQpIHtcbiAgICAgIGltbWVkaWF0ZSA9IGdldFBhcmVudChpbW1lZGlhdGUpO1xuICAgIH1cbiAgICBpZiAoaW1tZWRpYXRlID09PSBkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW1tZWRpYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVmZXJlbmNlIChkcm9wVGFyZ2V0LCB0YXJnZXQsIHgsIHkpIHtcbiAgICB2YXIgaG9yaXpvbnRhbCA9IG8uZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgdmFyIHJlZmVyZW5jZSA9IHRhcmdldCAhPT0gZHJvcFRhcmdldCA/IGluc2lkZSgpIDogb3V0c2lkZSgpO1xuICAgIHJldHVybiByZWZlcmVuY2U7XG5cbiAgICBmdW5jdGlvbiBvdXRzaWRlICgpIHsgLy8gc2xvd2VyLCBidXQgYWJsZSB0byBmaWd1cmUgb3V0IGFueSBwb3NpdGlvblxuICAgICAgdmFyIGxlbiA9IGRyb3BUYXJnZXQuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgZWw7XG4gICAgICB2YXIgcmVjdDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbCA9IGRyb3BUYXJnZXQuY2hpbGRyZW5baV07XG4gICAgICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGhvcml6b250YWwgJiYgKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyKSA+IHgpIHsgcmV0dXJuIGVsOyB9XG4gICAgICAgIGlmICghaG9yaXpvbnRhbCAmJiAocmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDIpID4geSkgeyByZXR1cm4gZWw7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc2lkZSAoKSB7IC8vIGZhc3RlciwgYnV0IG9ubHkgYXZhaWxhYmxlIGlmIGRyb3BwZWQgaW5zaWRlIGEgY2hpbGQgZWxlbWVudFxuICAgICAgdmFyIHJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh4ID4gcmVjdC5sZWZ0ICsgZ2V0UmVjdFdpZHRoKHJlY3QpIC8gMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZSh5ID4gcmVjdC50b3AgKyBnZXRSZWN0SGVpZ2h0KHJlY3QpIC8gMik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZSAoYWZ0ZXIpIHtcbiAgICAgIHJldHVybiBhZnRlciA/IG5leHRFbCh0YXJnZXQpIDogdGFyZ2V0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ29weSAoaXRlbSwgY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvLmNvcHkgPT09ICdib29sZWFuJyA/IG8uY29weSA6IG8uY29weShpdGVtLCBjb250YWluZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvdWNoeSAoZWwsIG9wLCB0eXBlLCBmbikge1xuICB2YXIgdG91Y2ggPSB7XG4gICAgbW91c2V1cDogJ3RvdWNoZW5kJyxcbiAgICBtb3VzZWRvd246ICd0b3VjaHN0YXJ0JyxcbiAgICBtb3VzZW1vdmU6ICd0b3VjaG1vdmUnXG4gIH07XG4gIHZhciBwb2ludGVycyA9IHtcbiAgICBtb3VzZXVwOiAncG9pbnRlcnVwJyxcbiAgICBtb3VzZWRvd246ICdwb2ludGVyZG93bicsXG4gICAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnXG4gIH07XG4gIHZhciBtaWNyb3NvZnQgPSB7XG4gICAgbW91c2V1cDogJ01TUG9pbnRlclVwJyxcbiAgICBtb3VzZWRvd246ICdNU1BvaW50ZXJEb3duJyxcbiAgICBtb3VzZW1vdmU6ICdNU1BvaW50ZXJNb3ZlJ1xuICB9O1xuICBpZiAoZ2xvYmFsLm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkge1xuICAgIGNyb3NzdmVudFtvcF0oZWwsIHBvaW50ZXJzW3R5cGVdLCBmbik7XG4gIH0gZWxzZSBpZiAoZ2xvYmFsLm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgbWljcm9zb2Z0W3R5cGVdLCBmbik7XG4gIH0gZWxzZSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgdG91Y2hbdHlwZV0sIGZuKTtcbiAgICBjcm9zc3ZlbnRbb3BdKGVsLCB0eXBlLCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2hpY2hNb3VzZUJ1dHRvbiAoZSkge1xuICBpZiAoZS50b3VjaGVzICE9PSB2b2lkIDApIHsgcmV0dXJuIGUudG91Y2hlcy5sZW5ndGg7IH1cbiAgaWYgKGUud2hpY2ggIT09IHZvaWQgMCAmJiBlLndoaWNoICE9PSAwKSB7IHJldHVybiBlLndoaWNoOyB9IC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMjYxXG4gIGlmIChlLmJ1dHRvbnMgIT09IHZvaWQgMCkgeyByZXR1cm4gZS5idXR0b25zOyB9XG4gIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgaWYgKGJ1dHRvbiAhPT0gdm9pZCAwKSB7IC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzk5ZThmZjFiYWE3YWUzNDFlOTRiYjg5YzNlODQ1NzBjN2MzYWQ5ZWEvc3JjL2V2ZW50LmpzI0w1NzMtTDU3NVxuICAgIHJldHVybiBidXR0b24gJiAxID8gMSA6IGJ1dHRvbiAmIDIgPyAzIDogKGJ1dHRvbiAmIDQgPyAyIDogMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0IChlbCkge1xuICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCArIGdldFNjcm9sbCgnc2Nyb2xsTGVmdCcsICdwYWdlWE9mZnNldCcpLFxuICAgIHRvcDogcmVjdC50b3AgKyBnZXRTY3JvbGwoJ3Njcm9sbFRvcCcsICdwYWdlWU9mZnNldCcpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbCAoc2Nyb2xsUHJvcCwgb2Zmc2V0UHJvcCkge1xuICBpZiAodHlwZW9mIGdsb2JhbFtvZmZzZXRQcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsW29mZnNldFByb3BdO1xuICB9XG4gIGlmIChkb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50RWxlbWVudFtzY3JvbGxQcm9wXTtcbiAgfVxuICByZXR1cm4gZG9jLmJvZHlbc2Nyb2xsUHJvcF07XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRCZWhpbmRQb2ludCAocG9pbnQsIHgsIHkpIHtcbiAgcG9pbnQgPSBwb2ludCB8fCB7fTtcbiAgdmFyIHN0YXRlID0gcG9pbnQuY2xhc3NOYW1lIHx8ICcnO1xuICB2YXIgZWw7XG4gIHBvaW50LmNsYXNzTmFtZSArPSAnIGd1LWhpZGUnO1xuICBlbCA9IGRvYy5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICBwb2ludC5jbGFzc05hbWUgPSBzdGF0ZTtcbiAgcmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBuZXZlciAoKSB7IHJldHVybiBmYWxzZTsgfVxuZnVuY3Rpb24gYWx3YXlzICgpIHsgcmV0dXJuIHRydWU7IH1cbmZ1bmN0aW9uIGdldFJlY3RXaWR0aCAocmVjdCkgeyByZXR1cm4gcmVjdC53aWR0aCB8fCAocmVjdC5yaWdodCAtIHJlY3QubGVmdCk7IH1cbmZ1bmN0aW9uIGdldFJlY3RIZWlnaHQgKHJlY3QpIHsgcmV0dXJuIHJlY3QuaGVpZ2h0IHx8IChyZWN0LmJvdHRvbSAtIHJlY3QudG9wKTsgfVxuZnVuY3Rpb24gZ2V0UGFyZW50IChlbCkgeyByZXR1cm4gZWwucGFyZW50Tm9kZSA9PT0gZG9jID8gbnVsbCA6IGVsLnBhcmVudE5vZGU7IH1cbmZ1bmN0aW9uIGlzSW5wdXQgKGVsKSB7IHJldHVybiBlbC50YWdOYW1lID09PSAnSU5QVVQnIHx8IGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgZWwudGFnTmFtZSA9PT0gJ1NFTEVDVCcgfHwgaXNFZGl0YWJsZShlbCk7IH1cbmZ1bmN0aW9uIGlzRWRpdGFibGUgKGVsKSB7XG4gIGlmICghZWwpIHsgcmV0dXJuIGZhbHNlOyB9IC8vIG5vIHBhcmVudHMgd2VyZSBlZGl0YWJsZVxuICBpZiAoZWwuY29udGVudEVkaXRhYmxlID09PSAnZmFsc2UnKSB7IHJldHVybiBmYWxzZTsgfSAvLyBzdG9wIHRoZSBsb29rdXBcbiAgaWYgKGVsLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7IHJldHVybiB0cnVlOyB9IC8vIGZvdW5kIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnQgaW4gdGhlIGNoYWluXG4gIHJldHVybiBpc0VkaXRhYmxlKGdldFBhcmVudChlbCkpOyAvLyBjb250ZW50RWRpdGFibGUgaXMgc2V0IHRvICdpbmhlcml0J1xufVxuXG5mdW5jdGlvbiBuZXh0RWwgKGVsKSB7XG4gIHJldHVybiBlbC5uZXh0RWxlbWVudFNpYmxpbmcgfHwgbWFudWFsbHkoKTtcbiAgZnVuY3Rpb24gbWFudWFsbHkgKCkge1xuICAgIHZhciBzaWJsaW5nID0gZWw7XG4gICAgZG8ge1xuICAgICAgc2libGluZyA9IHNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgfSB3aGlsZSAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlICE9PSAxKTtcbiAgICByZXR1cm4gc2libGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFdmVudEhvc3QgKGUpIHtcbiAgLy8gb24gdG91Y2hlbmQgZXZlbnQsIHdlIGhhdmUgdG8gdXNlIGBlLmNoYW5nZWRUb3VjaGVzYFxuICAvLyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MTkyNTYzL3RvdWNoZW5kLWV2ZW50LXByb3BlcnRpZXNcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8zNFxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZS50YXJnZXRUb3VjaGVzWzBdO1xuICB9XG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGdldENvb3JkIChjb29yZCwgZSkge1xuICB2YXIgaG9zdCA9IGdldEV2ZW50SG9zdChlKTtcbiAgdmFyIG1pc3NNYXAgPSB7XG4gICAgcGFnZVg6ICdjbGllbnRYJywgLy8gSUU4XG4gICAgcGFnZVk6ICdjbGllbnRZJyAvLyBJRThcbiAgfTtcbiAgaWYgKGNvb3JkIGluIG1pc3NNYXAgJiYgIShjb29yZCBpbiBob3N0KSAmJiBtaXNzTWFwW2Nvb3JkXSBpbiBob3N0KSB7XG4gICAgY29vcmQgPSBtaXNzTWFwW2Nvb3JkXTtcbiAgfVxuICByZXR1cm4gaG9zdFtjb29yZF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHJhZ3VsYTtcbiIsInZhciBzaSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsIHRpY2s7XG5pZiAoc2kpIHtcbiAgdGljayA9IGZ1bmN0aW9uIChmbikgeyBzZXRJbW1lZGlhdGUoZm4pOyB9O1xufSBlbHNlIHtcbiAgdGljayA9IGZ1bmN0aW9uIChmbikgeyBzZXRUaW1lb3V0KGZuLCAwKTsgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aWNrOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxudmFyIGdldFJhbmRvbVZhbHVlcztcbnZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuICAgIC8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xuXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFycikge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgdmFyIHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnXG5cbnR5cGUgSGFuZGxlcjxUPiA9IFQgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudEV2ZW50TWFwXG4gICAgPyAoZTogSFRNTEVsZW1lbnRFdmVudE1hcFtUXSkgPT4gdm9pZFxuICAgIDogKGU6IEV2ZW50KSA9PiB2b2lkXG5cbnR5cGUgTGlzdGVuZXJzID0ge1xuICBbaWQ6IHN0cmluZ106IHtcbiAgICBldmVudDogc3RyaW5nXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnRcbiAgICBoYW5kbGVyOiBIYW5kbGVyPHN0cmluZz5cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXZlbnRMaXN0ZW5lciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbGlzdGVuZXJzOiBMaXN0ZW5lcnMgPSB7fVxuXG4gIGFkZChldmVudDogc3RyaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgaGFuZGxlcjogKGU6IEV2ZW50KSA9PiB2b2lkLCBsaXN0ZW5lcklkID0gdXVpZCgpKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNbbGlzdGVuZXJJZF0gPSB7XG4gICAgICBldmVudCxcbiAgICAgIGVsZW1lbnQsXG4gICAgICBoYW5kbGVyLFxuICAgIH1cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpXG4gIH1cblxuICByZW1vdmUobGlzdGVuZXJJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1tsaXN0ZW5lcklkXVxuICAgIGlmICghbGlzdGVuZXIpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsaXN0ZW5lci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobGlzdGVuZXIuZXZlbnQsIGxpc3RlbmVyLmhhbmRsZXIpXG4gICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2xpc3RlbmVySWRdXG4gIH1cbn0iLCJpbXBvcnQgeyB2NCBhcyB1dWlkLCB2YWxpZGF0ZSB9IGZyb20gJ3V1aWQnXG5cbmV4cG9ydCBjb25zdCBzdGF0dXNNYXAgPSB7XG4gIHRvZG86ICdUb2RvJyxcbiAgZG9pbmc6ICdEb2luZycsXG4gIGRvbmU6ICdEb25lJyxcbn0gYXMgY29uc3RcbmV4cG9ydCB0eXBlIFN0YXR1cyA9IHR5cGVvZiBzdGF0dXNNYXBba2V5b2YgdHlwZW9mIHN0YXR1c01hcF1cblxuZXhwb3J0IHR5cGUgVGFza09iamVjdCA9IHtcbiAgaWQ6IHN0cmluZ1xuICB0aXRsZTogc3RyaW5nXG4gIHN0YXR1czogU3RhdHVzXG59XG5leHBvcnQgY2xhc3MgVGFzayB7XG4gIHJlYWRvbmx5IGlkXG4gIHRpdGxlXG4gIHN0YXR1c1xuXG4gIGNvbnN0cnVjdG9yKHByb3BlcnRpZXM6IHsgaWQ/OiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIHN0YXR1cz86IFN0YXR1cyB9KSB7XG4gICAgdGhpcy5pZCA9IHByb3BlcnRpZXMuaWQgfHwgdXVpZCgpXG4gICAgdGhpcy50aXRsZSA9IHByb3BlcnRpZXMudGl0bGVcbiAgICB0aGlzLnN0YXR1cyA9IHByb3BlcnRpZXMuc3RhdHVzIHx8IHN0YXR1c01hcC50b2RvXG4gICAgY29uc29sZS5sb2cocHJvcGVydGllcylcbiAgfVxuXG4gIHVwZGF0ZShwcm9wZXJ0aWVzOiB7IHRpdGxlPzogc3RyaW5nOyBzdGF0dXM/OiBTdGF0dXMgfSkge1xuICAgICAgdGhpcy50aXRsZSA9IHByb3BlcnRpZXMudGl0bGUgfHwgdGhpcy50aXRsZVxuICAgICAgdGhpcy5zdGF0dXMgPSBwcm9wZXJ0aWVzLnN0YXR1cyB8fCB0aGlzLnN0YXR1c1xuICB9XG5cbiAgc3RhdGljIHZhbGlkYXRlKHZhbHVlOiBhbnkpIHtcbiAgICBpZighdmFsdWUpIHJldHVybiBmYWxzZVxuICAgIGlmKCF2YWxpZGF0ZSh2YWx1ZS5pZCkpIHJldHVybiBmYWxzZVxuICAgIGlmKCF2YWx1ZS50aXRsZSkgcmV0dXJuIGZhbHNlXG4gICAgaWYoIU9iamVjdC52YWx1ZXMoc3RhdHVzTWFwKS5pbmNsdWRlcyh2YWx1ZS5zdGF0dXMpKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59IiwiaW1wb3J0IHsgU3RhdHVzLCBUYXNrLCBUYXNrT2JqZWN0IH0gZnJvbSAnLi9UYXNrJ1xuXG5jb25zdCBTVE9SQUdFX0tFWSA9ICdUQVNLUydcbmV4cG9ydCBjbGFzcyBUYXNrQ29sbGVjdGlvbiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZVxuICBwcml2YXRlIHRhc2tzXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdG9yYWdlID0gbG9jYWxTdG9yYWdlXG4gICAgdGhpcy50YXNrcyA9IHRoaXMuZ2V0U3RvcmVkVGFza3MoKVxuICB9XG5cbiAgYWRkKHRhc2s6IFRhc2spIHtcbiAgICB0aGlzLnRhc2tzLnB1c2godGFzaylcbiAgICB0aGlzLnVwZGF0ZVN0b3JhZ2UoKVxuICB9XG5cbiAgZGVsZXRlKHRhc2s6IFRhc2spIHtcbiAgICB0aGlzLnRhc2tzID0gdGhpcy50YXNrcy5maWx0ZXIodCA9PiB0LmlkICE9PSB0YXNrLmlkKVxuICAgIHRoaXMudXBkYXRlU3RvcmFnZSgpXG4gIH1cblxuICBmaW5kKGlkOiBzdHJpbmcpOiBUYXNrIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmluZCh0ID0+IHQuaWQgPT09IGlkKSB8fCBudWxsXG4gIH1cblxuICB1cGRhdGUodGFzazogVGFzaykge1xuICAgIHRoaXMudGFza3MgPSB0aGlzLnRhc2tzLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uaWQgPT09IHRhc2suaWQpIHtcbiAgICAgICAgcmV0dXJuIHRhc2tcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtXG4gICAgfSlcbiAgICB0aGlzLnVwZGF0ZVN0b3JhZ2UoKVxuICB9XG5cbiAgZmlsdGVyKGZpbHRlclN0YXR1czogU3RhdHVzKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKCh7IHN0YXR1cyB9KSA9PiBzdGF0dXMgPT09IGZpbHRlclN0YXR1cylcbiAgfVxuXG4gIG1vdmVBYm92ZVRhcmdldCh0YXNrOiBUYXNrLCB0YXJnZXQ6IFRhc2spIHtcbiAgICBjb25zdCB0YXNrSW5kZXggPSB0aGlzLnRhc2tzLmluZGV4T2YodGFzaylcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMudGFza3MuaW5kZXhPZih0YXJnZXQpXG5cbiAgICB0aGlzLmNoYW5nZU9yZGVyKHRhc2ssIHRhc2tJbmRleCwgdGFza0luZGV4IDwgdGFyZ2V0SW5kZXggPyB0YXJnZXRJbmRleCAtMSA6IHRhcmdldEluZGV4KVxuICB9XG5cbiAgbW92ZVRvTGFzdCh0YXNrOiBUYXNrKSB7XG4gICAgY29uc3QgdGFza0luZGV4ID0gdGhpcy50YXNrcy5pbmRleE9mKHRhc2spXG4gICAgdGhpcy5jaGFuZ2VPcmRlcih0YXNrLCB0YXNrSW5kZXgsIHRoaXMudGFza3MubGVuZ3RoKVxuICB9XG5cbiAgcHJpdmF0ZSBjaGFuZ2VPcmRlcih0YXNrOiBUYXNrLCBmcm9tSW5kZXg6IG51bWJlciwgdG9JbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy50YXNrcy5zcGxpY2UoZnJvbUluZGV4LCAxKVxuICAgIHRoaXMudGFza3Muc3BsaWNlKHRvSW5kZXgsIDAsIHRhc2spXG4gICAgdGhpcy51cGRhdGVTdG9yYWdlKClcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3RvcmFnZSgpIHtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkodGhpcy50YXNrcykpXG4gIH1cblxuICBwcml2YXRlIGdldFN0b3JlZFRhc2tzKCkge1xuICAgIGNvbnN0IGpzb25TdHJpbmcgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShTVE9SQUdFX0tFWSlcbiAgICBpZiAoIWpzb25TdHJpbmcpIHJldHVybiBbXVxuICAgIHRyeXtcbiAgICAgIGNvbnN0IHN0b3JlZFRhc2tzID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKVxuXG4gICAgICBhc3NlcnRJc1Rhc2tPYmplY3RzKHN0b3JlZFRhc2tzKVxuXG4gICAgICBjb25zdCB0YXNrcyA9IHN0b3JlZFRhc2tzLm1hcCh0ID0+IG5ldyBUYXNrKHQpKVxuICAgICAgcmV0dXJuIHRhc2tzXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0oU1RPUkFHRV9LRVkpXG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0SXNUYXNrT2JqZWN0cyh2YWx1ZTogYW55KTogYXNzZXJ0cyB2YWx1ZSBpcyBUYXNrT2JqZWN0W10ge1xuICBpZighQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgIXZhbHVlLmV2ZXJ5KChpdGVtKSA9PiBUYXNrLnZhbGlkYXRlKGl0ZW0pKSkge1xuICAgIHRocm93IG5ldyBFcnJvcign5byV5pWw44CMdmFsdWXjgI3jga8gVGFza09iamVjdFtdIOWei+OBqOS4gOiHtOOBl+OBvuOBm+OCk+OAgicpXG4gIH1cbn1cbiIsImltcG9ydCBkcmFndWxhIGZyb20gJ2RyYWd1bGEnXG5cbmltcG9ydCB7IFN0YXR1cywgVGFzaywgc3RhdHVzTWFwIH0gZnJvbSAnLi9UYXNrJ1xuaW1wb3J0IHsgVGFza0NvbGxlY3Rpb24gfSBmcm9tICcuL1Rhc2tDb2xsZWN0aW9uJ1xuXG5leHBvcnQgY2xhc3MgVGFza1JlbmRlcmVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0b2RvTGlzdDogSFRNTEVsZW1lbnQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2luZ0xpc3Q6IEhUTUxFbGVtZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9uZUxpc3Q6IEhUTUxFbGVtZW50KSB7XG4gIH1cblxuICBhcHBlbmQodGFzazogVGFzaykge1xuICAgIGNvbnN0IHt0YXNrRWwsIGRlbGV0ZUJ1dHRvbkVsfSA9IHRoaXMucmVuZGVyKHRhc2spXG5cbiAgICB0aGlzLnRvZG9MaXN0LmFwcGVuZCh0YXNrRWwpXG4gICAgcmV0dXJuIHsgZGVsZXRlQnV0dG9uRWwgfVxuICB9XG5cbiAgcmVuZGVyQWxsKHRhc2tDb2xsZWN0aW9uOiBUYXNrQ29sbGVjdGlvbikge1xuICAgIGNvbnN0IHRvZG9UYXNrcyA9IHRoaXMucmVuZGVyTGlzdCh0YXNrQ29sbGVjdGlvbi5maWx0ZXIoc3RhdHVzTWFwLnRvZG8pLCB0aGlzLnRvZG9MaXN0KVxuICAgIGNvbnN0IGRvaW5nVGFza3MgPSB0aGlzLnJlbmRlckxpc3QodGFza0NvbGxlY3Rpb24uZmlsdGVyKHN0YXR1c01hcC5kb2luZyksIHRoaXMuZG9pbmdMaXN0KVxuICAgIGNvbnN0IGRvbmVUYXNrcyA9IHRoaXMucmVuZGVyTGlzdCh0YXNrQ29sbGVjdGlvbi5maWx0ZXIoc3RhdHVzTWFwLmRvbmUpLCB0aGlzLmRvbmVMaXN0KVxuXG4gICAgcmV0dXJuIFsuLi50b2RvVGFza3MsIC4uLmRvaW5nVGFza3MsIC4uLmRvbmVUYXNrc11cbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKHRhc2s6IFRhc2spIHtcbiAgICAvLyA8ZGl2IGNsYXNzPVwidGFza0l0ZW1cIj5cbiAgICAvLyAgIDxzcGFuPuOCv+OCpOODiOODqzwvc3Bhbj5cbiAgICAvLyAgIDxidXR0b24+5YmK6ZmkPC9idXR0b24+XG4gICAgLy8gPC9kaXY+XG5cbiAgICBjb25zdCB0YXNrRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNvbnN0IHNwYW5FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcblxuICAgIHRhc2tFbC5pZCA9IHRhc2suaWRcbiAgICB0YXNrRWwuY2xhc3NMaXN0LmFkZCgndGFzay1pdGVtJylcbiAgICBzcGFuRWwudGV4dENvbnRlbnQgPSB0YXNrLnRpdGxlXG4gICAgZGVsZXRlQnV0dG9uRWwudGV4dENvbnRlbnQgPSAn5YmK6ZmkJ1xuICAgIHRhc2tFbC5hcHBlbmQoc3BhbkVsLCBkZWxldGVCdXR0b25FbClcblxuICAgIHJldHVybiB7dGFza0VsLCBkZWxldGVCdXR0b25FbH1cbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyTGlzdCh0YXNrczogVGFza1tdLCBsaXN0RWw6IEhUTUxFbGVtZW50KSB7XG4gICAgaWYodGFza3MubGVuZ3RoID09PSAwKSByZXR1cm5bXVxuICAgIGNvbnN0IHRhc2tMaXN0OiBBcnJheTx7XG4gICAgICB0YXNrOiBUYXNrLFxuICAgICAgZGVsZXRlQnV0dG9uRWw6IEhUTUxCdXR0b25FbGVtZW50XG4gICAgfT4gPSBbXVxuXG4gICAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgY29uc3Qge3Rhc2tFbCwgZGVsZXRlQnV0dG9uRWx9ID0gdGhpcy5yZW5kZXIodGFzaylcblxuICAgICAgbGlzdEVsLmFwcGVuZCh0YXNrRWwpXG4gICAgICB0YXNrTGlzdC5wdXNoKHt0YXNrLCBkZWxldGVCdXR0b25FbH0pXG4gICAgfSlcblxuICAgIHJldHVybiB0YXNrTGlzdFxuICB9XG5cbiAgcmVtb3ZlKHRhc2s6IFRhc2spIHtcbiAgICBjb25zdCB0YXNrRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXNrLmlkKVxuICAgIGlmICghdGFza0VsKSByZXR1cm5cblxuICAgIGlmKHRhc2suc3RhdHVzID09PSBzdGF0dXNNYXAudG9kbykge1xuICAgICAgdGhpcy50b2RvTGlzdC5yZW1vdmVDaGlsZCh0YXNrRWwpXG4gICAgfVxuICAgIGlmKHRhc2suc3RhdHVzID09PSBzdGF0dXNNYXAuZG9pbmcpIHtcbiAgICAgIHRoaXMuZG9pbmdMaXN0LnJlbW92ZUNoaWxkKHRhc2tFbClcbiAgICB9XG4gICAgaWYodGFzay5zdGF0dXMgPT09IHN0YXR1c01hcC5kb25lKSB7XG4gICAgICB0aGlzLmRvbmVMaXN0LnJlbW92ZUNoaWxkKHRhc2tFbClcbiAgICB9XG4gIH1cblxuICBzdWJzY3JpYmVEcmFnQW5kRHJvcChvbkRyb3A6IChlbDogRWxlbWVudCwgc2libGluZzogRWxlbWVudCB8IG51bGwsIG5ld1N0YXR1czogU3RhdHVzKSA9PiB2b2lkKSB7XG4gICAgZHJhZ3VsYShbdGhpcy50b2RvTGlzdCwgdGhpcy5kb2luZ0xpc3QsIHRoaXMuZG9uZUxpc3RdKVxuICAgICAgLm9uKCdkcm9wJywgKGVsLCB0YXJnZXQsIF9zb3VyY2UsIHNpYmxpbmcpID0+IHtcbiAgICAgICAgbGV0IG5ld1N0YXR1czogU3RhdHVzID0gc3RhdHVzTWFwLnRvZG9cbiAgICAgICAgaWYgKHRhcmdldC5pZCA9PT0gJ2RvaW5nTGlzdCcpIG5ld1N0YXR1cyA9IHN0YXR1c01hcC5kb2luZ1xuICAgICAgICBpZiAodGFyZ2V0LmlkID09PSAnZG9uZUxpc3QnKSBuZXdTdGF0dXMgPSBzdGF0dXNNYXAuZG9uZVxuXG4gICAgICAgIG9uRHJvcChlbCwgc2libGluZywgbmV3U3RhdHVzKVxuICAgICAgfSlcbiAgfVxuXG4gIGdldElkKGVsOiBFbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsLmlkXG4gIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50TGlzdGVuZXIgfSBmcm9tICcuL0V2ZW50TGlzdGVuZXInXG5pbXBvcnQgeyBTdGF0dXMsIFRhc2ssIHN0YXR1c01hcCB9IGZyb20gJy4vVGFzaydcbmltcG9ydCB7IFRhc2tDb2xsZWN0aW9uIH0gZnJvbSAnLi9UYXNrQ29sbGVjdGlvbidcbmltcG9ydCB7IFRhc2tSZW5kZXJlciB9IGZyb20gJy4vVGFza1JlbmRlcmVyJ1xuXG5jbGFzcyBBcHBsaWNhdGlvbiB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBldmVudExpc3RlbmVyID0gbmV3IEV2ZW50TGlzdGVuZXIoKVxuICBwcml2YXRlIHJlYWRvbmx5IHRhc2tDb2xsZWN0aW9uID0gbmV3IFRhc2tDb2xsZWN0aW9uKClcbiAgcHJpdmF0ZSByZWFkb25seSB0YXNrUmVuZGVyZXIgPSBuZXcgVGFza1JlbmRlcmVyKFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2RvTGlzdCcpIGFzIEhUTUxFbGVtZW50LFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb2luZ0xpc3QnKSBhcyBIVE1MRWxlbWVudCxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG9uZUxpc3QnKSBhcyBIVE1MRWxlbWVudFxuICApXG4gIHByaXZhdGUgZXhlY3V0ZURlbGV0ZVRhc2sgPSAodGFzazogVGFzaykgPT4ge1xuICAgIHRoaXMuZXZlbnRMaXN0ZW5lci5yZW1vdmUodGFzay5pZClcbiAgICB0aGlzLnRhc2tDb2xsZWN0aW9uLmRlbGV0ZSh0YXNrKVxuICAgIHRoaXMudGFza1JlbmRlcmVyLnJlbW92ZSh0YXNrKVxuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgY29uc3QgdGFza0l0ZW1zID0gdGhpcy50YXNrUmVuZGVyZXIucmVuZGVyQWxsKHRoaXMudGFza0NvbGxlY3Rpb24pXG4gICAgY29uc3QgY3JlYXRlRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcmVhdGVGb3JtJykgYXMgSFRNTEZvcm1FbGVtZW50XG4gICAgY29uc3QgZGVsZXRlQWxsRG9uZVRhc2tCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVsZXRlQWxsRG9uZVRhc2snKSBhcyBIVE1MQnV0dG9uRWxlbWVudFxuXG4gICAgdGFza0l0ZW1zLmZvckVhY2goKHsgdGFzaywgZGVsZXRlQnV0dG9uRWwgfSkgPT4ge1xuICAgICAgdGhpcy5ldmVudExpc3RlbmVyLmFkZCgnY2xpY2snLCBkZWxldGVCdXR0b25FbCxcbiAgICAgICAgKCkgPT4gdGhpcy5oYW5kbGVDbGlja0RlbGV0ZVRhc2sodGFzayksIHRhc2suaWQpXG4gICAgfSlcblxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lci5hZGQoJ3N1Ym1pdCcsIGNyZWF0ZUZvcm0sIHRoaXMuaGFuZGxlU3VibWl0KVxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lci5hZGQoJ2NsaWNrJywgZGVsZXRlQWxsRG9uZVRhc2tCdXR0b24sIHRoaXMuaGFuZGxlQ2xpY2tEZWxldGVkQWxsRG9uZVRhc2tzKVxuXG4gICAgdGhpcy50YXNrUmVuZGVyZXIuc3Vic2NyaWJlRHJhZ0FuZERyb3AodGhpcy5oYW5kbGVEcm9wQW5kRHJvcClcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU3VibWl0ID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdGl0bGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpIGFzIEhUTUxJbnB1dEVsZW1lbnRcbiAgICBpZighdGl0bGVJbnB1dC52YWx1ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHRhc2sgPSBuZXcgVGFzayh7IHRpdGxlOiB0aXRsZUlucHV0LnZhbHVlIH0pXG4gICAgdGhpcy50YXNrQ29sbGVjdGlvbi5hZGQodGFzaylcblxuICAgIGNvbnN0IHsgZGVsZXRlQnV0dG9uRWwgfSA9IHRoaXMudGFza1JlbmRlcmVyLmFwcGVuZCh0YXNrKVxuICAgIHRoaXMuZXZlbnRMaXN0ZW5lci5hZGQoXG4gICAgICAnY2xpY2snLFxuICAgICAgZGVsZXRlQnV0dG9uRWwsXG4gICAgICAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrRGVsZXRlVGFzayh0YXNrKSxcbiAgICAgIHRhc2suaWQsXG4gICAgKVxuICAgIHRpdGxlSW5wdXQudmFsdWUgPSAnJ1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDbGlja0RlbGV0ZVRhc2sgPSAodGFzazogVGFzaykgPT4ge1xuICAgIGlmKCF3aW5kb3cuY29uZmlybShg44CMJHt0YXNrLnRpdGxlfeOAjeOCkuWJiumZpOOBl+OBvuOBmeOBi++8n2ApKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5leGVjdXRlRGVsZXRlVGFzayh0YXNrKVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVEcm9wQW5kRHJvcCA9IChlbDogRWxlbWVudCwgc2libGluZzogRWxlbWVudCB8IG51bGwsIG5ld1N0YXR1czogU3RhdHVzKSA9PiB7XG4gICAgY29uc3QgdGFza0lkID0gdGhpcy50YXNrUmVuZGVyZXIuZ2V0SWQoZWwpXG4gICAgaWYgKCF0YXNrSWQpIHJldHVyblxuXG4gICAgY29uc3QgdGFzayA9IHRoaXMudGFza0NvbGxlY3Rpb24uZmluZCh0YXNrSWQpXG4gICAgaWYgKCF0YXNrKSByZXR1cm5cblxuICAgIHRhc2sudXBkYXRlKHsgc3RhdHVzOiBuZXdTdGF0dXMgfSlcbiAgICB0aGlzLnRhc2tDb2xsZWN0aW9uLnVwZGF0ZSh0YXNrKVxuXG4gICAgICBpZihzaWJsaW5nKSB7XG4gICAgICAgIGNvbnN0IG5leHRUYXNrSWQgPSB0aGlzLnRhc2tSZW5kZXJlci5nZXRJZChzaWJsaW5nKVxuICAgICAgICBpZighbmV4dFRhc2tJZCkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgbmV4dFRhc2sgPSB0aGlzLnRhc2tDb2xsZWN0aW9uLmZpbmQobmV4dFRhc2tJZClcbiAgICAgICAgaWYoIW5leHRUYXNrKSByZXR1cm5cblxuICAgICAgICB0aGlzLnRhc2tDb2xsZWN0aW9uLm1vdmVBYm92ZVRhcmdldCh0YXNrLCBuZXh0VGFzaylcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50YXNrQ29sbGVjdGlvbi5tb3ZlVG9MYXN0KHRhc2spXG4gICAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNsaWNrRGVsZXRlZEFsbERvbmVUYXNrcyA9ICgpID0+IHtcbiAgICBpZighd2luZG93LmNvbmZpcm0oJ0RPTkUg44Gu44K/44K544Kv44KS44GZ44G544Gm5YmK6Zmk44GX44G+44GZ44GL77yfJykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBkb25lVGFza3MgPSB0aGlzLnRhc2tDb2xsZWN0aW9uLmZpbHRlcihzdGF0dXNNYXAuZG9uZSlcbiAgICBkb25lVGFza3MuZm9yRWFjaCgodGFzaykgPT4gdGhpcy5leGVjdXRlRGVsZXRlVGFzayh0YXNrKSlcbiAgfVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgY29uc3QgYXBwID0gbmV3IEFwcGxpY2F0aW9uKCk7XG4gIGFwcC5zdGFydCgpO1xufSlcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhIiwibiIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwidGlja3kiLCJmbiIsImFyZ3MiLCJjdHgiLCJhcHBseSIsImF0b2EiLCJkZWJvdW5jZSIsInRoaW5nIiwib3B0aW9ucyIsIm9wdHMiLCJldnQiLCJ1bmRlZmluZWQiLCJvbiIsInR5cGUiLCJwdXNoIiwib25jZSIsIl9vbmNlIiwib2ZmIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImV0Iiwic3BsaWNlIiwiaW5kZXhPZiIsImVtaXQiLCJlbWl0dGVyU25hcHNob3QiLCJzaGlmdCIsInRoaXMiLCJ0aHJvd3MiLCJmb3JFYWNoIiwibGlzdGVuIiwiYXN5bmMiLCJjdXN0b21FdmVudCIsImV2ZW50bWFwIiwiZG9jIiwiZyIsImRvY3VtZW50IiwiYWRkRXZlbnQiLCJlbCIsImNhcHR1cmluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYXJkQ2FjaGUiLCJ1bndyYXAiLCJpIiwiaXRlbSIsImVsZW1lbnQiLCJmaW5kIiwid3JhcHBlciIsImF0dGFjaEV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImUiLCJldmVudCIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwid2hpY2giLCJrZXlDb2RlIiwid3JhcHBlckZhY3RvcnkiLCJ3cmFwIiwibGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImFkZCIsInJlbW92ZSIsImZhYnJpY2F0ZSIsIm1vZGVsIiwiZGV0YWlsIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjcmVhdGVFdmVudE9iamVjdCIsIm1ha2VDbGFzc2ljRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZmlyZUV2ZW50IiwiZXZlbnRuYW1lIiwicm9uIiwidGVzdCIsIk5hdGl2ZUN1c3RvbUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJwIiwiZm9vIiwidXNlTmF0aXZlIiwicGFyYW1zIiwiaW5pdEN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJCb29sZWFuIiwiY2FjaGUiLCJsb29rdXBDbGFzcyIsImNsYXNzTmFtZSIsImNhY2hlZCIsImxhc3RJbmRleCIsIlJlZ0V4cCIsImN1cnJlbnQiLCJybSIsInJlcGxhY2UiLCJ0cmltIiwiZW1pdHRlciIsImNyb3NzdmVudCIsImNsYXNzZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaHkiLCJvcCIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW91c2V1cCIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsIm1zUG9pbnRlckVuYWJsZWQiLCJ3aGljaE1vdXNlQnV0dG9uIiwidG91Y2hlcyIsImJ1dHRvbnMiLCJidXR0b24iLCJnZXRPZmZzZXQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImdldFNjcm9sbCIsInRvcCIsInNjcm9sbFByb3AiLCJvZmZzZXRQcm9wIiwiY2xpZW50SGVpZ2h0IiwiYm9keSIsImdldEVsZW1lbnRCZWhpbmRQb2ludCIsInBvaW50IiwieCIsInkiLCJzdGF0ZSIsImVsZW1lbnRGcm9tUG9pbnQiLCJuZXZlciIsImFsd2F5cyIsImdldFJlY3RXaWR0aCIsIndpZHRoIiwicmlnaHQiLCJnZXRSZWN0SGVpZ2h0IiwiaGVpZ2h0IiwiYm90dG9tIiwiZ2V0UGFyZW50IiwicGFyZW50Tm9kZSIsImlzSW5wdXQiLCJ0YWdOYW1lIiwiaXNFZGl0YWJsZSIsImNvbnRlbnRFZGl0YWJsZSIsIm5leHRFbCIsIm5leHRFbGVtZW50U2libGluZyIsInNpYmxpbmciLCJuZXh0U2libGluZyIsIm5vZGVUeXBlIiwibWFudWFsbHkiLCJnZXRDb29yZCIsImNvb3JkIiwiaG9zdCIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImdldEV2ZW50SG9zdCIsIm1pc3NNYXAiLCJwYWdlWCIsInBhZ2VZIiwiaW5pdGlhbENvbnRhaW5lcnMiLCJfbWlycm9yIiwiX3NvdXJjZSIsIl9pdGVtIiwiX29mZnNldFgiLCJfb2Zmc2V0WSIsIl9tb3ZlWCIsIl9tb3ZlWSIsIl9pbml0aWFsU2libGluZyIsIl9jdXJyZW50U2libGluZyIsIl9jb3B5IiwiX3JlbmRlclRpbWVyIiwibGVuIiwiaXNBcnJheSIsIl9ncmFiYmVkIiwiX2xhc3REcm9wVGFyZ2V0IiwibyIsIm1vdmVzIiwiYWNjZXB0cyIsImludmFsaWQiLCJpbnZhbGlkVGFyZ2V0IiwiY29udGFpbmVycyIsImlzQ29udGFpbmVyIiwiY29weSIsImNvcHlTb3J0U291cmNlIiwicmV2ZXJ0T25TcGlsbCIsInJlbW92ZU9uU3BpbGwiLCJkaXJlY3Rpb24iLCJpZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24iLCJtaXJyb3JDb250YWluZXIiLCJkcmFrZSIsInN0YXJ0IiwibWFudWFsU3RhcnQiLCJlbmQiLCJjYW5jZWwiLCJkZXN0cm95IiwiY2FuTW92ZSIsImRyYWdnaW5nIiwic3BpbGxPdmVyIiwic3BpbGxPdXQiLCJldmVudHMiLCJncmFiIiwicmVsZWFzZSIsImV2ZW50dWFsTW92ZW1lbnRzIiwic3RhcnRCZWNhdXNlTW91c2VNb3ZlZCIsIm1vdmVtZW50cyIsInByZXZlbnRHcmFiYmVkIiwiY2xpZW50WCIsImNsaWVudFkiLCJtZXRhS2V5IiwiY3RybEtleSIsImNvbnRleHQiLCJjYW5TdGFydCIsImZvY3VzIiwiTWF0aCIsImFicyIsInNsaWRlRmFjdG9yWCIsInNsaWRlRmFjdG9yWSIsImdyYWJiZWQiLCJvZmZzZXQiLCJyZW5kZXJNaXJyb3JJbWFnZSIsImRyYWciLCJoYW5kbGUiLCJzb3VyY2UiLCJpc0NvcHkiLCJjbG9uZU5vZGUiLCJkcm9wIiwidW5ncmFiIiwiZHJvcFRhcmdldCIsImZpbmREcm9wVGFyZ2V0IiwicGFyZW50IiwicmVtb3ZlQ2hpbGQiLCJpc0luaXRpYWxQbGFjZW1lbnQiLCJjbGVhbnVwIiwicmV2ZXJ0IiwicmV2ZXJ0cyIsImluaXRpYWwiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVNaXJyb3JJbWFnZSIsImNsZWFyVGltZW91dCIsInMiLCJlbGVtZW50QmVoaW5kQ3Vyc29yIiwiYWNjZXB0ZWQiLCJpbW1lZGlhdGUiLCJnZXRJbW1lZGlhdGVDaGlsZCIsInJlZmVyZW5jZSIsImdldFJlZmVyZW5jZSIsInN0eWxlIiwiY2hhbmdlZCIsIm1vdmVkIiwiYXBwZW5kQ2hpbGQiLCJob3Jpem9udGFsIiwicmVzb2x2ZSIsImNoaWxkcmVuIiwib3V0c2lkZSIsImFmdGVyIiwiY29udGFpbmVyIiwidGljayIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93Iiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiY3J5cHRvIiwiYmluZCIsIm1zQ3J5cHRvIiwiRXJyb3IiLCJ1dWlkIiwiYnl0ZVRvSGV4IiwidG9TdHJpbmciLCJzdWJzdHIiLCJidWYiLCJybmRzIiwicmFuZG9tIiwiYXJyIiwidG9Mb3dlckNhc2UiLCJUeXBlRXJyb3IiLCJFdmVudExpc3RlbmVyIiwibGlzdGVuZXJzIiwiaGFuZGxlciIsImxpc3RlbmVySWQiLCJzdGF0dXNNYXAiLCJ0b2RvIiwiZG9pbmciLCJkb25lIiwiVGFzayIsImNvbnN0cnVjdG9yIiwicHJvcGVydGllcyIsImlkIiwidGl0bGUiLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwidXBkYXRlIiwic3RhdGljIiwidmFsdWUiLCJ2YWx1ZXMiLCJpbmNsdWRlcyIsIlNUT1JBR0VfS0VZIiwiVGFza0NvbGxlY3Rpb24iLCJzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwidGFza3MiLCJnZXRTdG9yZWRUYXNrcyIsInRhc2siLCJ1cGRhdGVTdG9yYWdlIiwiZGVsZXRlIiwiZmlsdGVyIiwidCIsIm1hcCIsImZpbHRlclN0YXR1cyIsIm1vdmVBYm92ZVRhcmdldCIsInRhc2tJbmRleCIsInRhcmdldEluZGV4IiwiY2hhbmdlT3JkZXIiLCJtb3ZlVG9MYXN0IiwiZnJvbUluZGV4IiwidG9JbmRleCIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwianNvblN0cmluZyIsImdldEl0ZW0iLCJzdG9yZWRUYXNrcyIsInBhcnNlIiwiZXZlcnkiLCJ2YWxpZGF0ZSIsImFzc2VydElzVGFza09iamVjdHMiLCJyZW1vdmVJdGVtIiwiVGFza1JlbmRlcmVyIiwidG9kb0xpc3QiLCJkb2luZ0xpc3QiLCJkb25lTGlzdCIsImFwcGVuZCIsInRhc2tFbCIsImRlbGV0ZUJ1dHRvbkVsIiwicmVuZGVyIiwicmVuZGVyQWxsIiwidGFza0NvbGxlY3Rpb24iLCJyZW5kZXJMaXN0IiwiY3JlYXRlRWxlbWVudCIsInNwYW5FbCIsImNsYXNzTGlzdCIsInRleHRDb250ZW50IiwibGlzdEVsIiwidGFza0xpc3QiLCJnZXRFbGVtZW50QnlJZCIsInN1YnNjcmliZURyYWdBbmREcm9wIiwib25Ecm9wIiwibmV3U3RhdHVzIiwiZ2V0SWQiLCJBcHBsaWNhdGlvbiIsImV2ZW50TGlzdGVuZXIiLCJ0YXNrUmVuZGVyZXIiLCJleGVjdXRlRGVsZXRlVGFzayIsImhhbmRsZVN1Ym1pdCIsInRpdGxlSW5wdXQiLCJoYW5kbGVDbGlja0RlbGV0ZVRhc2siLCJjb25maXJtIiwiaGFuZGxlRHJvcEFuZERyb3AiLCJ0YXNrSWQiLCJuZXh0VGFza0lkIiwibmV4dFRhc2siLCJoYW5kbGVDbGlja0RlbGV0ZWRBbGxEb25lVGFza3MiLCJ0YXNrSXRlbXMiLCJjcmVhdGVGb3JtIiwiZGVsZXRlQWxsRG9uZVRhc2tCdXR0b24iXSwic291cmNlUm9vdCI6IiJ9